{"version":3,"sources":["components/homepage/styles.js","actions/messages.js","actions/chats.js","defaults/messageTypesKeys.js","databases/index.js","defaults/allowedChats.js","components/control/styles.js","components/control/index.js","containers/control.js","components/chatlist/styles.js","components/chat/messages/styles.js","defaults/schemeColors/theme.js","defaults/schemeColors/scheme.js","defaults/schemeColors/messageScheme.js","components/chat/messages/index.js","containers/messages.js","defaults/schemeColors/chatScheme.js","databases/views.js","databases/filters.js","components/chat/styles.js","components/chat/header.js","containers/chat/header.js","components/chat/form.js","components/chat/footer.js","containers/chat/footer.js","components/chat/index.js","containers/chat/index.js","defaults/schemeSizes.js","components/chatlist/index.js","containers/chatlist.js","components/homepage/index.js","components/checkDb.js","components/root.js","serviceWorker.js","reducers/chats.js","defaults/messageTypes.js","reducers/messageTypes.js","reducers/messages.js","reducers/index.js","index.js"],"names":["StyleSheet","create","main","padding","PUSH_MESSAGES","REMOVE_ALL_MESSAGES","UPDATE_MESSAGES","SAVE_DRAFT","SEND_DRAFT_MESSAGE","saveDraft","draftMessage","type","payload","message","ADD_CHAT","REMOVE_CHAT","options","showOnGameControl","chatAddBtnSettings","defaultOptions","showOnGameControlCreateChats","addChatIdToChatFromArray","addChatIdToChatToArray","preFillFrom","chats","chatId","label","Object","objectSpread","getGameControlChats","filter","chat","createMessage","display","createMessageShow","ChatControll","props","content","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","newMessageForm","bind","assertThisInitialized","closeMessageForm","injectForm","generateMessages","editor","editorRef","React","createRef","state","activeSchema","createChats","count","_this2","createMessages","Array","apply","map","messageType","messageTypes","Math","floor","random","length","required","reduce","field","value","enumArr","properties","enum","isArray","format","toString","loremIpsum","default","e","target","name","destroy","setState","schema","from","sort","x","y","JSONEditor","current","theme","validate","getValue","_this3","react_default","a","createElement","className","css","styles","Row","Col","md","Card","CardHeader","CardBody","ListGroup","key","ListGroupItem","tag","active","parseInt","onClick","title","includes","removeChat","createChat","CardFooter","Button","block","color","clearMessages","ref","Component","ControlContainer","connect","scheme","id","dispatch","messages","_ref","Control","chatItem","paddingBottom","height","position","paddingTop",":after","width","top","background","left",":before","bottom","zIndex","container","maxHeight","item","verticalAligin","maxWidth","scrolContent","badge","fontSize","lineHeight","borderRadius","overflow","opacity",":hover","badgeLeft","badgeBg","scrollbar","boxSizing","margin","bg","blue","gray","green","red","yellow","black","white","lightBlue","lightGray","lightBlack","buttons","transparent","text","ColorScheme","itemId","items","itemDefault","global","getItemScheme","getGlobalScheme","MessageScheme","ChatMessages","timeId","loadTimeId","loading","scrolledDown","loadMoreCount","getScrollHeight","onScrollUp","onYReachStart","onYReachEnd","scrollToDown","firstScrolled","showItemsCount","clearTimeout","setTimeout","currentHeigth","_container","scrollTop","scrollHeight","newItemsCount","fromChat","colorScheme","MessageColorScheme","itemStyles","textAlign","style","classNames","keys","charAt","_this4","lib_default","suppressScrollX","contentClassName","slice","max","msg","renderItem","doc","MessagesContainer","Messages","ChatScheme","btn","body","footer","light","tab","activeTab","cn","require","PouchDB","plugin","pouchdbFullSync","getDb","dbKey","optionsManual","optLoc","db","remote","remoteDB","fullySync","live","retry","forEach","to","draft","replace","RegExp","views","query","view","params","namespace","split","catch","err","Error","status","put","_id","then","filters","prefix","changes","since","include_docs","right","labelContainer","labelButton","paddingRight","paddingLeft","ChatHeader","button","children","defaultMessageType","createDraft","defaultValues","HeaderContainer","find","Header","ChatForm","initForm","submitForm","getFormFilteredData","editorBox","hiddenAutofillKeys","setValue","form","values","formFiltered","concat","toConsumableArray","messageFiltered","requiredKey","indexOf","splice","formData","_loop","editors","hasOwnProperty","watch","data","defineProperty","getEditor","sendDraftMessage","ChatFooter","renderDropdown","toggle","toggleDropdown","renderTabs","showDropdownAfter","activeDraft","dropdownOpen","Dropdown","isOpen","DropdownToggle","caret","DropdownMenu","DropdownItem","Nav","tabs","NavItem","NavLink","TabContent","TabPane","tabId","chat_form","FooterContainer","Footer","Chat","updateState","f","changeTimer","rows","updateMessages","changeTime","ChatColorScheme","getScheme","on","cancel","chat_header","containers_messages","chat_footer","ChatContainer","Chatlist","xs","chatSizes","sm","containers_chat","ChatsContainer","stage","Chats","Homepage","Container","fluid","containers_chatlist","containers_control","CheckDb","check","messagesFiltersInitialized","messagesViewsInitialized","done","checkMessages","checkFilter","checkView","filterKeys","currentKey","docId","get","row","equal","console","log","viewKeys","_ref2","Root","store","es","checkDb","BrowserRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","initialState","persistentReducer","arguments","undefined","action","description","weight","prop","getMessageTypes","getId","Date","toISOString","initAdditionalAttributes","bulkDocs","allDocs","result","Promise","all","search","remove","rev","_rev","_deleted","combineReducers","applyMiddlewares","applyMiddleware","thunk","composeWithDevTools","persistentStore","createStore","createStoreWithMiddleware","reducers","ReactDOM","render","root","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f8878e8.chunk.js","sourcesContent":["import { StyleSheet } from 'aphrodite'\r\n\r\nexport default StyleSheet.create({\r\n  main: {\r\n    padding: '15px 0'\r\n  },\r\n})\r\n","/*\r\n * action types\r\n */\r\n\r\nexport const PUSH_MESSAGES = \"PUSH_MESSAGES\"\r\nexport const REMOVE_ALL_MESSAGES = \"REMOVE_ALL_MESSAGES\"\r\nexport const GENERATE_RANDOM_MESSAGES = \"PUSH_MESSAGES\"\r\nexport const UPDATE_MESSAGES = \"UPDATE_MESSAGES\"\r\nexport const SAVE_DRAFT = \"SAVE_DRAFT\"\r\nexport const SEND_DRAFT_MESSAGE = \"SEND_DRAFT_MESSAGE\"\r\n\r\n/*\r\n * action creators\r\n */\r\n\r\nexport function sendDraftMessage(draftMessage) {\r\n  return { type: SEND_DRAFT_MESSAGE, payload: { message: draftMessage } }\r\n}\r\n\r\nexport function saveDraft(draftMessage) {\r\n  return { type: SAVE_DRAFT, payload: { message: draftMessage } }\r\n}\r\n\r\nexport function createMessages(messages) {\r\n  return { type: PUSH_MESSAGES, payload: { messages: messages } }\r\n}\r\n\r\nexport function removeAllMessages() {\r\n  return { type: REMOVE_ALL_MESSAGES }\r\n}\r\n\r\nexport function updateMessages(messages, chatId) {\r\n  return { type: UPDATE_MESSAGES, payload: { messages: messages, chatId: chatId} }\r\n}\r\n","/*\r\n * action types\r\n */\r\n\r\nexport const ADD_CHAT = \"ADD_CHAT\"\r\nexport const REMOVE_CHAT = \"REMOVE_CHAT\"\r\n\r\n/*\r\n * action creators\r\n */\r\n\r\nexport function createChat({chatId, label}) {\r\n  return { type: ADD_CHAT, payload: { chat: { id: chatId, label: label } } }\r\n}\r\n\r\nexport function removeChat(chatId) {\r\n  return { type: REMOVE_CHAT, payload: chatId }\r\n}\r\n","// this message types will be shown in game control inject message list\r\nexport const showOnGameControl = [\r\n  \"height\", \"color\", \"weight\",\r\n]\r\n\r\n// this message type will be used on chat header add button click\r\nexport const chatAddBtnSettings = {\r\n  scheme: \"name\",\r\n  format: \"table\" //grid\r\n}\r\n","import PouchDB from 'pouchdb-browser'\r\nimport pouchdbFullSync from 'pouchdb-full-sync'\r\nimport defaultOptions from './config-default.json'\r\nlet options;\r\n\r\ntry {\r\n options = require('./config-local.json')\r\n}\r\ncatch (e) {\r\n options = {}\r\n}\r\n\r\noptions = {\r\n  ...defaultOptions,\r\n  ...options\r\n}\r\n\r\nPouchDB.plugin(pouchdbFullSync)\r\n\r\nconst getDb = (dbKey, optionsManual) => {\r\n\r\n  if(!options[dbKey] && !optionsManual)\r\n    return new PouchDB(dbKey)\r\n\r\n  if(!optionsManual) optionsManual = {}\r\n\r\n  const optLoc = options[dbKey] ? {...options[dbKey], ...optionsManual} : optionsManual\r\n\r\n  const db = new PouchDB(optLoc.name || dbKey)\r\n\r\n  if(optLoc.remote) {\r\n    const remoteDB = new PouchDB(optLoc.remote)\r\n    db.fullySync(remoteDB, {\r\n      live: optLoc.live,\r\n      retry: optLoc.retry\r\n    })\r\n  }\r\n  return db\r\n}\r\n\r\nexport default getDb\r\n/*\r\ndb.fullySync(remoteDB, {\r\n  live: true,\r\n  retry: true\r\n}).on('change', function (info) {\r\n  // handle change\r\n}).on('paused', function () {\r\n  // replication paused (e.g. user went offline)\r\n}).on('active', function () {\r\n  // replicate resumed (e.g. user went back online)\r\n}).on('denied', function (info) {\r\n  // a document failed to replicate, e.g. due to permissions\r\n}).on('complete', function (info) {\r\n  // handle complete\r\n}).on('error', function (err) {\r\n  // handle error\r\n});\r\n*/\r\n","const defaultOptions = {\r\n  showOnGameControlCreateChats: true,\r\n  addChatIdToChatFromArray: true,\r\n  addChatIdToChatToArray: true,\r\n  preFillFrom: false\r\n}\r\n\r\nconst chats = [\r\n  {\r\n    chatId: \"red\",\r\n    label:\"Red Chat\",\r\n    options: {\r\n      ...defaultOptions\r\n    }\r\n  },\r\n  {\r\n    chatId: \"blue\",\r\n    label:\"Blue Chat\",\r\n    options: {\r\n      ...defaultOptions\r\n    }\r\n  },\r\n  {\r\n    chatId: \"white\",\r\n    label:\"White Chat\",\r\n    options: {\r\n      ...defaultOptions,\r\n      addChatIdToChatToArray: false,\r\n      preFillFrom: true\r\n    }\r\n  }\r\n]\r\n\r\nexport const getToKeys = () => {\r\n  return chats\r\n          .filter(chat => chat.options.addChatIdToChatToArray)\r\n          .map(chat => chat.chatId)\r\n}\r\nexport const getFromKeys = () => {\r\n  return chats\r\n          .filter(chat => chat.options.addChatIdToChatFromArray)\r\n          .map(chat => chat.chatId)\r\n}\r\n\r\nexport const getGameControlChats = () => {\r\n  return chats\r\n          .filter(chat => chat.options.showOnGameControlCreateChats)\r\n}\r\n\r\nexport default chats\r\n","import { StyleSheet } from 'aphrodite'\r\n\r\nexport default StyleSheet.create({\r\n  main: {\r\n    padding: '15px 0'\r\n  },\r\n  createMessage: {\r\n    display: 'none',\r\n  },\r\n  createMessageShow: {\r\n    display: 'block',\r\n  }\r\n})\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Row, Col, Card, CardHeader, CardBody, CardFooter, Button, ListGroup, ListGroupItem } from 'reactstrap'\r\nimport JSONEditor from '@json-editor/json-editor'\r\nimport loremIpsum from 'lorem-ipsum'\r\nimport { getGameControlChats } from '../../defaults/allowedChats'\r\n\r\nimport { css } from 'aphrodite/no-important'\r\nimport styles from './styles'\r\n\r\nclass ChatControll extends Component {\r\n  constructor(props, content) {\r\n    super(props, content)\r\n\r\n    this.newMessageForm = this.newMessageForm.bind(this)\r\n    this.closeMessageForm = this.closeMessageForm.bind(this)\r\n    this.injectForm = this.injectForm.bind(this)\r\n    this.generateMessages = this.generateMessages.bind(this)\r\n    this.editor = null\r\n    this.editorRef = React.createRef()\r\n\r\n    this.state = {\r\n      activeSchema: null,\r\n      createChats: getGameControlChats()\r\n    }\r\n  }\r\n\r\n  generateMessages(count) {\r\n    this.props.createMessages(Array.apply(null, Array(count)).map(() => {\r\n      const messageType = this.props.messageTypes[Math.floor(Math.random()*this.props.messageTypes.length)]\r\n      return messageType.required.reduce((map, field) => {\r\n\r\n        let value = \"\"\r\n        const enumArr = messageType.properties[field].enum;\r\n        if(Array.isArray(enumArr) && enumArr.length) {\r\n          value = enumArr[Math.floor(Math.random()*enumArr.length)]\r\n        }\r\n        else if(messageType.properties[field].format === \"color\") {\r\n          value = '#'+Math.floor(Math.random()*16777215).toString(16)\r\n        }\r\n        else {\r\n          switch (messageType.properties[field].type) {\r\n            case \"integer\":\r\n              value = Math.floor(Math.random()*999)\r\n              break;\r\n            case \"string\":\r\n              value = loremIpsum({count: 1})\r\n              break;\r\n            default:\r\n              value = messageType.properties[field].default || loremIpsum({count: 1})\r\n          }\r\n        }\r\n\r\n        map[field] = value\r\n        return map\r\n      }, {})\r\n    }));\r\n  }\r\n\r\n  newMessageForm(e) {\r\n    if(this.state.activeSchema !== e.target.name) {\r\n      if(this.editor)\r\n        this.editor.destroy()\r\n\r\n      this.setState({activeSchema: e.target.name})\r\n      let schema = this.props.messageTypes[e.target.name]\r\n      schema.properties.from.enum = schema.properties.from.enum.sort((x, y) => (x === \"white\" ? -1 : y === \"white\" ? 1 : 0))\r\n\r\n      this.editor = new JSONEditor(this.editorRef.current, {\r\n        schema: schema,\r\n        theme: 'bootstrap4'\r\n      })\r\n    }\r\n    else\r\n      this.closeMessageForm()\r\n  }\r\n\r\n  closeMessageForm() {\r\n    this.editor.destroy()\r\n    this.setState({activeSchema: null})\r\n  }\r\n\r\n  injectForm() {\r\n    if(!(this.editor.validate()).length) {\r\n      this.props.createMessages([this.editor.getValue()])\r\n      this.closeMessageForm()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={css(styles.main)}>\r\n        <Row className=\"main\">\r\n          <Col md={4}>\r\n            <Card>\r\n              <CardHeader>Game Control</CardHeader>\r\n              <CardBody>\r\n                <p>Inject Messages:</p>\r\n                <ListGroup>\r\n                  {this.props.messageTypes.map((schema, key) => (\r\n                    <ListGroupItem\r\n                      key={key}\r\n                      tag=\"button\"\r\n                      active={key === parseInt(this.state.activeSchema)}\r\n                      onClick={this.newMessageForm}\r\n                      name={key}\r\n                    >\r\n                      {schema.title}\r\n                    </ListGroupItem>\r\n                  ))}\r\n                </ListGroup>\r\n              </CardBody>\r\n              {(!!this.state.createChats.length) && <CardBody>\r\n                <p>Create chats:</p>\r\n                <ListGroup>\r\n                  {this.state.createChats.map((chat, key) => {\r\n                    const active = this.props.chats.includes(chat.chatId)\r\n                    return (\r\n                      <ListGroupItem\r\n                        key={key}\r\n                        tag=\"button\"\r\n                        active={active}\r\n                        onClick={() => {\r\n                          if (active)\r\n                            this.props.removeChat(chat.chatId)\r\n                          else\r\n                            this.props.createChat(chat)\r\n                        }}\r\n                      >\r\n                        {chat.label}\r\n                      </ListGroupItem>\r\n                    )\r\n                  })}\r\n                </ListGroup>\r\n              </CardBody>}\r\n              <CardFooter>\r\n                <Button block color=\"success\" onClick={() => {this.generateMessages(50)}}>Generate 50 Messages</Button>\r\n                <Button block color=\"success\" onClick={() => {this.generateMessages(100)}}>Generate 100 Messages</Button>\r\n                <Button block color=\"success\" onClick={() => {this.generateMessages(1000)}}>Generate 1000 Messages</Button>\r\n              </CardFooter>\r\n              <CardFooter>\r\n                <Button block color=\"danger\" onClick={this.props.clearMessages}>Clear Messages</Button>\r\n              </CardFooter>\r\n            </Card>\r\n          </Col>\r\n          <Col md={8}>\r\n            <div className={css(styles.createMessage, this.state.activeSchema && styles.createMessageShow)}>\r\n              <Card>\r\n                <CardBody>\r\n                  <div ref={this.editorRef}/>\r\n                </CardBody>\r\n                <CardFooter>\r\n                  <Button color=\"success\" onClick={this.injectForm}>Inject</Button>\r\n                </CardFooter>\r\n              </Card>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nChatControll.propTypes = {\r\n  messageTypes: PropTypes.array,\r\n  clearMessages: PropTypes.func.isRequired,\r\n  createMessages: PropTypes.func.isRequired,\r\n  createChat: PropTypes.func.isRequired,\r\n  removeChat: PropTypes.func.isRequired,\r\n  chats: PropTypes.array,\r\n}\r\n\r\nexport default ChatControll\r\n","import { connect } from 'react-redux'\r\nimport { createMessages, removeAllMessages } from '../actions/messages'\r\nimport { createChat, removeChat } from '../actions/chats'\r\nimport { showOnGameControl } from '../defaults/messageTypesKeys'\r\n\r\nimport Control from '../components/control'\r\n\r\nconst mapStateToProps = state => ({\r\n  messageTypes: state.messageTypes.filter(type => (showOnGameControl.includes(type.scheme))),\r\n  chats: state.chats.map((chat) => chat && chat.id)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n  return {\r\n    createMessages: (messages) => {\r\n      dispatch(createMessages(messages))\r\n    },\r\n    clearMessages: () => {\r\n      dispatch(removeAllMessages())\r\n    },\r\n    createChat: (chat) => {\r\n      dispatch(createChat(chat))\r\n    },\r\n    removeChat: (id) => {\r\n      dispatch(removeChat(id))\r\n    }\r\n  }\r\n}\r\n\r\nconst ControlContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Control)\r\n\r\nexport default ControlContainer\r\n","import { StyleSheet } from 'aphrodite'\r\n\r\nexport default StyleSheet.create({\r\n  chatItem: {\r\n    paddingBottom: '15px'\r\n  },\r\n})\r\n","import { StyleSheet } from 'aphrodite/no-important'\r\n\r\nexport default StyleSheet.create({\r\n  main: {\r\n    height: '320px',\r\n    position: 'relative',\r\n    paddingTop: '0.1px',\r\n    \":after\": {\r\n      content: '\"\"',\r\n      display: 'block',\r\n      position: 'absolute',\r\n      width: \"100%\",\r\n      height: '20px',\r\n      top: '100%',\r\n      background: \"linear-gradient(to bottom, rgba(255,255,255,0) 0%,rgba(255,255,255,1) 100%)\",\r\n      left: '0',\r\n    },\r\n    \":before\": {\r\n      content: '\"\"',\r\n      display: 'block',\r\n      position: 'absolute',\r\n      width: \"100%\",\r\n      height: '20px',\r\n      bottom: '100%',\r\n      left: '0',\r\n      zIndex: '2',\r\n      background: \"linear-gradient(to bottom, rgba(255,255,255,1) 0%,rgba(255,255,255,0) 100%)\",\r\n    }\r\n  },\r\n  container: {\r\n    position: 'absolute',\r\n    maxHeight: '100%',\r\n    height: 'auto',\r\n    left: '0',\r\n    bottom: '0',\r\n    width: '100%'\r\n  },\r\n  item: {\r\n    display: 'inline-block',\r\n    verticalAligin: 'top',\r\n    maxWidth: \"100%\",\r\n  },\r\n  scrolContent: {\r\n    padding: '20px'\r\n  },\r\n  badge: {\r\n    maxWidth: \"100%\",\r\n    fontSize: '16px',\r\n    lineHeight: '20px',\r\n    padding: '5px 15px',\r\n    borderRadius: '15px 0 15px 15px',\r\n    position: 'relative',\r\n    overflow: 'hidden',\r\n    display: 'inline-block',\r\n    verticalAligin: 'top',\r\n    opacity: '0.9',\r\n    color: '#fff',\r\n    ':hover': {\r\n      opacity: '1'\r\n    }\r\n  },\r\n  badgeLeft: {\r\n    borderRadius: '0 15px 15px 15px',\r\n  },\r\n  badgeBg: {\r\n    opacity: '0.8',\r\n    position: 'absolute',\r\n    left: '0',\r\n    bottom: '0',\r\n    height: '100%',\r\n    width: '100%'\r\n  },\r\n  message: {\r\n    position: 'relative'\r\n  },\r\n  scrollbar: {\r\n    boxSizing: 'content-box',\r\n    width: '100%',\r\n    padding: '20px',\r\n    margin: '-20px 0 0 -20px',\r\n    position: 'relative',\r\n    height: '100%'\r\n  }\r\n})\r\n","export const bg = {\r\n  blue: \"bg-primary\",\r\n  gray: \"bg-secondary\",\r\n  green: \"bg-success\",\r\n  red: \"bg-danger\",\r\n  yellow: \"bg-warning\",\r\n  black: \"bg-dark\",\r\n  white: \"bg-white\",\r\n  lightBlue: \"bg-info\",\r\n  lightGray: \"bg-light\",\r\n  lightBlack: \"bg-muted\",\r\n}\r\n\r\nexport const buttons = {\r\n  transparent: \"link\",\r\n  blue: \"primary\",\r\n  gray: \"secondary\",\r\n  green: \"success\",\r\n  red: \"danger\",\r\n  yellow: \"warning\",\r\n  lightBlue: \"info\",\r\n}\r\n\r\nexport const text = {\r\n  blue: \"text-primary\",\r\n  gray: \"text-secondary\",\r\n  green: \"text-success\",\r\n  red: \"text-danger\",\r\n  yellow: \"text-warning\",\r\n  black: \"text-dark\",\r\n  white: \"text-white\",\r\n  lightBlue: \"text-info\",\r\n  lightGray: \"text-light\",\r\n  lightBlack: \"text-muted\",\r\n}\r\n\r\nconst theme = {\r\n  bg: bg,\r\n  buttons: buttons,\r\n  text: text\r\n}\r\n\r\nexport default theme\r\n","class ColorScheme {\r\n\r\n  constructor(id) {\r\n    this.itemId = id\r\n    this.items = {}\r\n    this.itemDefault = {}\r\n    this.global = {}\r\n  }\r\n\r\n  getGlobalScheme() {\r\n    return this.global\r\n  }\r\n\r\n  getItemScheme() {\r\n    return {\r\n      ...this.itemDefault,\r\n      ...(this.items[this.itemId] || {})\r\n    }\r\n  }\r\n\r\n  getScheme() {\r\n    return {\r\n      item: this.getItemScheme(),\r\n      global: this.getGlobalScheme(),\r\n    }\r\n  }\r\n}\r\n\r\nexport default ColorScheme\r\n","import { bg, text } from './theme'\r\nimport ColorScheme from './scheme'\r\n\r\nclass MessageScheme extends ColorScheme {\r\n\r\n  constructor(chatId) {\r\n    super(chatId)\r\n\r\n    this.items = {\r\n      red: {\r\n        bg: bg.red,\r\n      },\r\n      blue: {\r\n        bg: bg.blue,\r\n      }\r\n    }\r\n\r\n    this.itemDefault = {\r\n      bg: bg.gray,\r\n      text: text.white,\r\n    }\r\n  }\r\n}\r\n\r\nexport default MessageScheme\r\n","import React, { Component, createRef } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { css } from 'aphrodite/no-important'\r\nimport styles from './styles'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport MessageColorScheme from '../../../defaults/schemeColors/messageScheme'\r\nimport classNames from 'classnames/bind'\r\n\r\nclass ChatMessages extends Component {\r\n  constructor(props, content) {\r\n    super(props, content)\r\n\r\n    this.timeId = null\r\n    this.loadTimeId = null\r\n    this.loading = false\r\n    this.scrolledDown = true\r\n    this.scrollbar = createRef()\r\n    this.loadMoreCount = 10\r\n\r\n    this.getScrollHeight = this.getScrollHeight.bind(this)\r\n    this.onScrollUp = this.onScrollUp.bind(this)\r\n    this.onYReachStart = this.onYReachStart.bind(this)\r\n    this.onYReachEnd = this.onYReachEnd.bind(this)\r\n    this.scrollToDown = this.scrollToDown.bind(this)\r\n    this.firstScrolled = false\r\n\r\n    this.state = {\r\n      showItemsCount: 10,\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearTimeout(this.loadTimeId)\r\n  }\r\n\r\n  onScrollUp() {\r\n    this.scrolledDown = false\r\n  }\r\n\r\n  onYReachEnd() {\r\n    this.scrolledDown = true\r\n  }\r\n\r\n  onYReachStart() {\r\n\r\n    if(this.loadTimeId)\r\n      clearTimeout(this.loadTimeId)\r\n\r\n    this.loadTimeId = setTimeout(() => {\r\n      const currentHeigth = this.getScrollHeight()\r\n      if(!this.scrolledDown && !this.loading) {\r\n        this.loading = true\r\n        this.setState({showItemsCount: this.state.showItemsCount + this.loadMoreCount})\r\n        setTimeout(() => {\r\n          if(this.scrollbar.current)\r\n            this.scrollbar.current._container.scrollTop = this.getScrollHeight() - currentHeigth\r\n          this.loading = false\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  getScrollHeight() {\r\n    return this.scrollbar.current ? this.scrollbar.current._container.scrollHeight : 0\r\n  }\r\n\r\n  scrollToDown() {\r\n    if(this.timeId)\r\n      clearTimeout(this.timeId)\r\n\r\n    this.timeId = setTimeout(() => {\r\n      if(this.scrollbar.current) {\r\n        this.scrollbar.current._container.scrollTop = this.getScrollHeight()\r\n        this.firstScrolled = true\r\n      }\r\n      else {\r\n        if(!this.firstScrolled) {\r\n          this.timeId = setTimeout(() => {\r\n            this.scrollToDown()\r\n          }, 512)\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    if(this.props.messages.length !== 0 && props.messages.length > this.state.showItemsCount && this.props.messages.length < props.messages.length) {\r\n      let newItemsCount = props.messages.length - this.props.messages.length\r\n      this.setState({showItemsCount: this.state.showItemsCount + (newItemsCount > this.loadMoreCount ? this.loadMoreCount : newItemsCount) })\r\n    }\r\n\r\n    this.scrollToDown()\r\n  }\r\n\r\n  renderItem(message) {\r\n    if(!message) return \"\"\r\n    const fromChat = message.from === this.props.chatId\r\n    const colorScheme = (new MessageColorScheme(message.from)).getItemScheme()\r\n    let itemStyles = {}\r\n\r\n    if(fromChat) {\r\n      itemStyles = { textAlign: 'right' }\r\n    }\r\n\r\n    return(\r\n      <div style={itemStyles}>\r\n        <div className={css(styles.item)}>\r\n          <div className={css(styles.badge, (!fromChat) && styles.badgeLeft)}>\r\n            <div className={classNames(css(styles.badgeBg), colorScheme.bg)}/>\r\n            <div className={classNames(css(styles.message), colorScheme.text)}>\r\n              {Object.keys(message).map(key => (key.charAt(0) !== '_' && message[key] && <div key={key}><strong>{key}:</strong> {message[key]}</div>))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={css(styles.main)}>\r\n        <div className={css(styles.scrollbar)}>\r\n          <PerfectScrollbar\r\n            ref={this.scrollbar}\r\n            onYReachEnd={this.onYReachEnd}\r\n            onScrollUp={this.onScrollUp}\r\n            onYReachStart={this.onYReachStart}\r\n            suppressScrollX={true}\r\n            className={css(styles.container)}\r\n            contentClassName={css(styles.scrolContent)}\r\n          >\r\n            <div className={css(styles.scrolContent)}>\r\n              {this.props.messages.slice(Math.max(this.props.messages.length - this.state.showItemsCount, 0)).map((msg, key) => (\r\n                <div key={key}>{this.renderItem(msg.doc)}</div>\r\n              ))}\r\n            </div>\r\n          </PerfectScrollbar>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nChatMessages.propTypes = {\r\n  messages: PropTypes.array.isRequired,\r\n  chatId: PropTypes.string.isRequired\r\n}\r\n\r\nexport default ChatMessages\r\n","import { connect } from 'react-redux'\r\nimport Messages from '../components/chat/messages'\r\n\r\nconst mapStateToProps = (state, { chatId }) => {\r\n  return {\r\n    messages: (state.messages && Array.isArray(state.messages[chatId])) ? state.messages[chatId] : [],\r\n    chatId: chatId\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {}\r\n}\r\n\r\nconst MessagesContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Messages)\r\n\r\nexport default MessagesContainer\r\n","import { bg, buttons, text } from './theme'\r\nimport ColorScheme from './scheme'\r\nimport cn from 'classnames'\r\n\r\nclass ChatScheme extends ColorScheme {\r\n\r\n  constructor(chatId) {\r\n    super(chatId)\r\n\r\n    this.items = {\r\n      red: {\r\n        bg: bg.red,\r\n        text: text.white\r\n      },\r\n      blue: {\r\n        bg: bg.blue,\r\n        text: text.white\r\n      }\r\n    }\r\n\r\n    this.itemDefault = {\r\n      bg: bg.lightGray,\r\n      text: text.black,\r\n      btn: buttons.gray\r\n    }\r\n\r\n    this.global = {\r\n      body: bg.white,\r\n      footer: bg.light,\r\n      tab: bg.white,\r\n      activeTab: cn(bg.blue, text.white),\r\n    }\r\n  }\r\n}\r\n\r\nexport default ChatScheme\r\n","import chats from '../defaults/allowedChats'\r\nconst emit = () => {}\r\n\r\n// declare the messages views\r\nlet messages = {}\r\nchats.forEach(({chatId}) => {\r\n  messages[chatId] = {\r\n    map: (doc => {\r\n      if((doc.to === \"chatId\" && doc.draft === false) || doc.from === \"chatId\")\r\n        emit(doc.id)\r\n    }).toString().replace(new RegExp(\"chatId\", 'g'), chatId)\r\n  }\r\n})\r\n\r\n// declare the views\r\nexport const views = {\r\n  messages: messages\r\n}\r\n\r\n// query couchdb views\r\nexport const query = (db, view, params) => {\r\n  const namespace = view.split('/')[0]\r\n\r\n  return db.query(view, params).catch(err => {\r\n    if (!views[namespace]) throw new Error('View ' + namespace + ' is not defined.')\r\n\r\n    // if view doesn't exist, create it, and try again\r\n    if (err.status === 404) {\r\n      return db.put({\r\n        _id: '_design/' + namespace,\r\n        views: views[namespace]\r\n      }).then(() => (query(db, view, params)))\r\n    }\r\n  })\r\n}\r\n\r\nexport default views\r\n","import chats from '../defaults/allowedChats'\r\n/* pouchdb filter management\r\n */\r\n\r\n // declare the messages filters\r\nlet messages = {}\r\nchats.forEach(({chatId}) => {\r\n  messages[chatId] = (doc => ((doc.to === \"chatId\" && doc.draft === false) || doc.from === \"chatId\"))\r\n                    .toString()\r\n                    .replace(new RegExp(\"chatId\", 'g'), chatId)\r\n})\r\n\r\n// declare the filters\r\nexport const filters = {\r\n  messages: messages\r\n}\r\n\r\nexport const prefix = 'filter'\r\n\r\n// query couchdb filters\r\nexport const changes = (db, filter, params) => {\r\n  return db.changes({\r\n    since: 'now',\r\n    live: true,\r\n    include_docs: true,\r\n    filter: prefix + filter\r\n  })\r\n}\r\n\r\nexport default filters\r\n","import { StyleSheet } from 'aphrodite/no-important'\r\n\r\nexport default StyleSheet.create({\r\n  label: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    right: 0,\r\n  },\r\n  labelContainer: {\r\n    position: 'relative',\r\n    width: '100%'\r\n  },\r\n  labelButton: {\r\n    paddingRight: '0 !important',\r\n    paddingLeft: '0 !important'\r\n  }\r\n})\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { CardHeader, Button } from 'reactstrap'\r\nimport { css } from 'aphrodite/no-important'\r\nimport styles from './styles'\r\n\r\nconst ChatHeader = ({ colorScheme, button, children, chatId, defaultMessageType, createDraft }) => {\r\n\r\n  const headerButtonOnClick = () => {\r\n    let message = {}\r\n    \r\n    defaultMessageType.required.forEach(field => {\r\n      let value = \"\"\r\n\r\n      const enumArr = defaultMessageType.properties[field].enum;\r\n\r\n      if(Array.isArray(enumArr) && enumArr.length) {\r\n        if(field === 'from' && enumArr.includes(chatId))\r\n          value = chatId\r\n        else if(defaultMessageType.properties[field].default)\r\n          value = defaultMessageType.properties[field].default\r\n        else\r\n          value = enumArr[0]\r\n      }\r\n      else if(defaultMessageType.properties[field].default) {\r\n        value = defaultMessageType.properties[field].default\r\n      }\r\n\r\n      message[field] = value\r\n    })\r\n\r\n    createDraft(message)\r\n  }\r\n\r\n  return (\r\n    <CardHeader className={colorScheme.item.bg}>\r\n      <div className={css(styles.labelContainer)}>\r\n        <div className={css(styles.label)}>\r\n          <Button color=\"link\" className={css(styles.labelButton)}>\r\n            <strong className={colorScheme.item.text}>{children}</strong>\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      {button && defaultMessageType && <Button color={colorScheme.item.btn} onClick={headerButtonOnClick}>{button}</Button>}\r\n    </CardHeader>\r\n  )\r\n}\r\n\r\nChatHeader.propTypes = {\r\n  createDraft: PropTypes.func.isRequired,\r\n  colorScheme: PropTypes.object.isRequired,\r\n  defaultMessageType: PropTypes.object.isRequired,\r\n  chatId: PropTypes.string.isRequired,\r\n  children: PropTypes.string,\r\n  button: PropTypes.string\r\n}\r\n\r\nChatHeader.defaultValues = {\r\n  button: \"\",\r\n  children: \"\"\r\n}\r\n\r\nexport default ChatHeader\r\n","import { connect } from 'react-redux'\r\nimport Header from '../../components/chat/header'\r\nimport { saveDraft } from '../../actions/messages'\r\nimport { chatAddBtnSettings } from '../../defaults/messageTypesKeys'\r\n\r\nconst mapStateToProps = (state) => ({\r\n  defaultMessageType: state.messageTypes.find(type => (type.scheme === chatAddBtnSettings.scheme))\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n  return {\r\n    createDraft: (message) => {\r\n      dispatch(saveDraft(message))\r\n    }\r\n  }\r\n}\r\n\r\nconst HeaderContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Header)\r\n\r\nexport default HeaderContainer\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Button } from 'reactstrap'\r\nimport JSONEditor from '@json-editor/json-editor'\r\n\r\nclass ChatForm extends Component {\r\n  constructor(props, content) {\r\n    super(props, content)\r\n\r\n    this.initForm = this.initForm.bind(this)\r\n    this.submitForm = this.submitForm.bind(this)\r\n    this.getFormFilteredData = this.getFormFilteredData.bind(this)\r\n\r\n    this.editor = null\r\n    this.editorBox = React.createRef()\r\n    this.hiddenAutofillKeys =  [\"draft\", \"_id\", \"_rev\", \"from\", \"test\"]\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initForm()\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    if(this.editor)\r\n      this.editor.setValue(this.getFormFilteredData(props.form, props.message).values)\r\n  }\r\n\r\n  getFormFilteredData(form, message) {\r\n    let formFiltered = {\r\n      ...form,\r\n      required: [\"_id\", ...form.required],\r\n      properties: {...form.properties}\r\n    }\r\n    let messageFiltered = {...message}\r\n\r\n    this.hiddenAutofillKeys.forEach(key => {\r\n      const requiredKey = formFiltered.required.indexOf(key)\r\n      if(requiredKey > -1)\r\n        formFiltered.required.splice(requiredKey, 1)\r\n\r\n      if(formFiltered.properties[key])\r\n        delete formFiltered.properties[key]\r\n\r\n      if(messageFiltered[key])\r\n        delete messageFiltered[key]\r\n    })\r\n    \r\n    return {\r\n      form: formFiltered,\r\n      values: messageFiltered\r\n    }\r\n  }\r\n\r\n  initForm() {\r\n    const formData = this.getFormFilteredData(this.props.form, this.props.message)\r\n\r\n    this.editor = new JSONEditor(this.editorBox.current, {\r\n      schema: formData.form,\r\n      theme: 'bootstrap4'\r\n    }).setValue(formData.values)\r\n\r\n    for(let key in this.editor.editors) {\r\n      if(this.editor.editors.hasOwnProperty(key) && key !== 'root') {\r\n        this.editor.watch(key, data => {\r\n          this.props.saveDraft({\r\n            ...this.props.message,\r\n            ...this.editor.getValue(),\r\n            [key.replace('root.', '')]: this.editor.getEditor(key).getValue()\r\n          })\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  submitForm() {\r\n    if(!this.editor.validate().length)\r\n      this.props.sendDraftMessage({\r\n        ...this.props.message,\r\n        ...this.editor.getValue(),\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"messageEdit\">\r\n        <div ref={this.editorBox}/>\r\n        <Button onClick={this.submitForm}>{this.props.button}</Button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nChatForm.propTypes = {\r\n  button: PropTypes.string.isRequired,\r\n  form: PropTypes.object.isRequired,\r\n  message: PropTypes.object.isRequired,\r\n  sendDraftMessage: PropTypes.func.isRequired,\r\n  saveDraft: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default ChatForm\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n  CardFooter,\r\n  Dropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  TabContent,\r\n  TabPane\r\n} from 'reactstrap'\r\nimport DraftForm from './form'\r\n\r\n\r\nclass ChatFooter extends Component {\r\n\r\n  constructor(props, content) {\r\n    super(props,content)\r\n\r\n    this.renderDropdown = this.renderDropdown.bind(this)\r\n    this.toggle = this.toggle.bind(this)\r\n    this.toggleDropdown = this.toggleDropdown.bind(this)\r\n    this.renderTabs = this.renderTabs.bind(this)\r\n\r\n    this.showDropdownAfter = 3\r\n\r\n    this.state = {\r\n      activeDraft: props.messages.length - 1,\r\n      dropdownOpen: false\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    if(this.props.messages.length !== props.messages.length)\r\n      this.toggle(props.messages.length - 1)\r\n  }\r\n\r\n  toggle(key) {\r\n    this.setState({\r\n      activeDraft: key,\r\n    })\r\n  }\r\n\r\n  toggleDropdown() {\r\n    this.setState({\r\n      dropdownOpen: !this.state.dropdownOpen\r\n    })\r\n  }\r\n\r\n  renderDropdown() {\r\n    return (\r\n      <Dropdown isOpen={this.state.dropdownOpen} toggle={this.toggleDropdown}>\r\n        <DropdownToggle caret className={this.props.colorScheme.global.activeTab}>\r\n          {this.props.messages[this.state.activeDraft].doc.title || `Draft ${this.state.activeDraft}`}\r\n        </DropdownToggle>\r\n        <DropdownMenu right>\r\n          {this.props.messages.map((data, key) => (\r\n            <DropdownItem\r\n              key={key}\r\n              className={this.state.activeDraft === key ? this.props.colorScheme.global.activeTab : \"\"}\r\n              onClick={() => { this.toggle(key)} }\r\n            >\r\n              {data.doc.title || `Draft ${key}`}\r\n            </DropdownItem>\r\n          ))}\r\n        </DropdownMenu>\r\n      </Dropdown>\r\n    )\r\n  }\r\n\r\n  renderTabs() {\r\n    if(this.props.messages.length < 2)\r\n      return <div/>\r\n\r\n    return (\r\n      <Nav tabs>\r\n        {this.props.messages.map((data, key) => (\r\n          <NavItem key={key}>\r\n            <NavLink\r\n              className={this.state.activeDraft === key ?\r\n                this.props.colorScheme.global.activeTab :\r\n                this.props.colorScheme.global.tab\r\n              }\r\n              onClick={() => { this.toggle(key)} }\r\n            >\r\n              {data.doc.title ? data.doc.title : `Draft ${key + 1}`}\r\n            </NavLink>\r\n          </NavItem>\r\n        ))}\r\n      </Nav>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <CardFooter className={this.props.colorScheme.global.footer}>\r\n        {this.props.messages.length > 0 && <TabContent activeTab={this.state.activeDraft + \"\"}>\r\n          {this.props.messages.length > this.showDropdownAfter ? this.renderDropdown() : this.renderTabs()}\r\n          {this.props.messages.map((data, key) => (\r\n            <TabPane key={key} tabId={key+\"\"}>\r\n              <DraftForm\r\n                message={data.doc}\r\n                button={this.props.button}\r\n                form={this.props.form}\r\n                saveDraft={this.props.saveDraft}\r\n                sendDraftMessage={this.props.sendDraftMessage}\r\n              />\r\n            </TabPane>\r\n          ))}\r\n        </TabContent >}\r\n      </CardFooter>\r\n    )\r\n  }\r\n}\r\n\r\nChatFooter.propTypes = {\r\n  saveDraft: PropTypes.func.isRequired,\r\n  sendDraftMessage: PropTypes.func.isRequired,\r\n  colorScheme: PropTypes.object.isRequired,\r\n  chatId: PropTypes.string.isRequired,\r\n  button: PropTypes.string.isRequired,\r\n  form: PropTypes.object.isRequired,\r\n  messages: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default ChatFooter\r\n","import { connect } from 'react-redux'\r\nimport Footer from '../../components/chat/footer'\r\nimport { sendDraftMessage, saveDraft } from '../../actions/messages'\r\nimport { chatAddBtnSettings } from '../../defaults/messageTypesKeys'\r\n\r\n\r\nconst mapStateToProps = (state, {chatId}) => ({\r\n  messages: (state.messages && Array.isArray(state.messages[chatId])) ? state.messages[chatId].filter(msg => msg.doc.draft) : [],\r\n  form: {\r\n    ...state.messageTypes.find(type => (type.scheme === chatAddBtnSettings.scheme)),\r\n    format: chatAddBtnSettings.format\r\n  }\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n  return {\r\n    sendDraftMessage: (message) => {\r\n      dispatch(sendDraftMessage(message))\r\n    },\r\n    saveDraft: (message) => {\r\n      dispatch(saveDraft(message))\r\n    }\r\n  }\r\n}\r\n\r\nconst FooterContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Footer)\r\n\r\nexport default FooterContainer\r\n","import React, { Component } from 'react'\r\nimport { Card, CardBody } from 'reactstrap'\r\nimport PropTypes from 'prop-types'\r\nimport Messages from '../../containers/messages'\r\nimport ChatColorScheme from '../../defaults/schemeColors/chatScheme'\r\nimport getDb from '../../databases'\r\nimport { query } from '../../databases/views'\r\nimport { changes, prefix } from '../../databases/filters'\r\n\r\nimport Header from '../../containers/chat/header'\r\nimport Footer from '../../containers/chat/footer'\r\n\r\nclass Chat extends Component {\r\n  constructor(props, content) {\r\n    super(props, content)\r\n    this.changeTimer = null\r\n    this.changeTime = 128\r\n    this.updateState = this.updateState.bind(this)\r\n    this.db = getDb('messages')\r\n    this.changes = changes(this.db, 'messages/' + props.chatId)\r\n\r\n    this.state = {\r\n      colorScheme: (new ChatColorScheme(props.chatId)).getScheme()\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.updateState(() => {\r\n      this.changes.on('change', () => {\r\n        this.updateState()\r\n      })\r\n    })\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    if(this.props.chatId !== props.chatId) {\r\n      this.changes.cancel()\r\n      clearTimeout(this.changeTimer)\r\n      this.changes = changes(this.db, 'messages/' + props.chatId).on('change', () => {\r\n        this.updateState()\r\n      })\r\n      this.setState({colorScheme: (new ChatColorScheme(props.chatId)).getScheme()})\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.changes.cancel()\r\n    clearTimeout(this.changeTimer)\r\n  }\r\n\r\n  updateState = (f) => {\r\n    if(this.changeTimer) clearTimeout(this.changeTimer)\r\n    this.changeTimer = setTimeout(() => {\r\n      query(this.db, 'messages/' + this.props.chatId, {\r\n        include_docs: true,\r\n        filter: prefix + 'messages/' + this.props.chatId\r\n      }).then(({rows}) => {\r\n        this.props.updateMessages(rows || [], this.props.chatId)\r\n        if(typeof f === 'function') f()\r\n      })\r\n    }, this.changeTime)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <Header colorScheme={this.state.colorScheme} button=\"Add >>\" chatId={this.props.chatId}>{this.props.label}</Header>\r\n        <CardBody className={this.state.colorScheme.global.body}>\r\n          <Messages chatId={this.props.chatId}/>\r\n        </CardBody>\r\n        <Footer colorScheme={this.state.colorScheme} button=\"Send\" chatId={this.props.chatId}/>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\n\r\nChat.propTypes = {\r\n  chatId: PropTypes.string.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  updateMessages: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Chat\r\n","import { connect } from 'react-redux'\r\nimport Chat from '../../components/chat'\r\nimport { updateMessages } from '../../actions/messages'\r\n\r\nconst mapStateToProps = (state) => ({})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  updateMessages: (messages, chatId) => {\r\n    dispatch(updateMessages(messages, chatId))\r\n  }\r\n})\r\n\r\nconst ChatContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Chat)\r\n\r\nexport default ChatContainer\r\n","export const chat = { xs: 12, sm: 6, md: 4, lg: 4 }\r\n","import React from 'react'\r\nimport { css } from 'aphrodite/no-important';\r\nimport styles from './styles'\r\nimport { Row, Col } from 'reactstrap'\r\nimport Chat from '../../containers/chat'\r\nimport { chat as chatSizes } from '../../defaults/schemeSizes'\r\n\r\nconst Chatlist = ({ chats, form }) => {\r\n  return (\r\n    <Row>\r\n      {chats.map((chat, key) => (chat &&\r\n        <Col xs={chatSizes.xs} sm={chatSizes.sm} md={chatSizes.md} key={key}>\r\n          <div className={css(styles.chatItem)}>\r\n            <Chat chatId={chat.id} label={chat.label} form={form}/>\r\n          </div>\r\n        </Col>\r\n      ))}\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default Chatlist\r\n","import { connect } from 'react-redux'\r\nimport Chats from '../components/chatlist'\r\nimport { chatAddBtnSettings } from '../defaults/messageTypesKeys'\r\n\r\nconst mapStateToProps = stage => ({\r\n  chats: stage.chats,\r\n  form: {\r\n    ...stage.messageTypes.find(type => (type.scheme === chatAddBtnSettings.scheme)),\r\n    format: chatAddBtnSettings.format\r\n  }\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({})\r\n\r\nconst ChatsContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Chats)\r\n\r\nexport default ChatsContainer\r\n","import React from 'react'\r\nimport { css } from 'aphrodite/no-important';\r\nimport styles from './styles'\r\nimport { Container } from 'reactstrap'\r\nimport Control from '../../containers/control'\r\nimport Chats from '../../containers/chatlist'\r\n\r\nconst Homepage = () => {\r\n  return (\r\n    <Container fluid>\r\n      <div className={css(styles.main)}>\r\n        <Chats/>\r\n        <Control/>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Homepage\r\n","import React, { Component } from 'react'\r\nimport getDb from '../databases'\r\nimport { prefix, filters } from '../databases/filters'\r\nimport { views } from '../databases/views'\r\n\r\nclass CheckDb extends Component {\r\n  constructor(props, content) {\r\n    super(props, content)\r\n\r\n    this.check = this.check.bind(this)\r\n    this.messagesFiltersInitialized = false\r\n    this.messagesViewsInitialized = false\r\n    this.state = {\r\n      done: false\r\n    }\r\n  }\r\n\r\n  check() {\r\n    if(this.messagesFiltersInitialized && this.messagesViewsInitialized) {\r\n      this.setState({done: true})\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.checkMessages()\r\n  }\r\n\r\n  checkMessages() {\r\n    this.checkFilter(filters, prefix, Object.keys(filters))\r\n    this.checkView(views, Object.keys(views))\r\n  }\r\n\r\n  checkFilter(filters, prefix, filterKeys, currentKey) {\r\n\r\n    if(!currentKey) currentKey = 0\r\n    if(!filterKeys.length || filterKeys.length <= currentKey) {\r\n      this.messagesFiltersInitialized = true\r\n      this.check()\r\n      return false\r\n    }\r\n\r\n    const db = getDb(filterKeys[currentKey], {live: false})\r\n\r\n    const docId = '_design/' + prefix + filterKeys[currentKey]\r\n\r\n    db.get(docId).then(row => {\r\n      let equal = true\r\n      if(row.filters) {\r\n        Object.keys(filters[filterKeys[currentKey]]).forEach(key => {\r\n          if(!row.filters[key] || filters[filterKeys[currentKey]][key] !== row.filters[key])\r\n            equal = false\r\n        })\r\n      }\r\n      else equal = false\r\n\r\n      if(equal) {\r\n        this.checkFilter(filters, prefix, filterKeys, currentKey + 1)\r\n      }\r\n      else {\r\n        console.log(`Updateing Filters ${docId}`)\r\n        db.put({\r\n          ...row,\r\n          filters: filters[filterKeys[currentKey]]\r\n        }).then(() => {\r\n          console.log(`Updateing Filters ${docId} (success)`)\r\n          this.checkFilter(filters, prefix, filterKeys, currentKey + 1)\r\n        })\r\n      }\r\n    }).catch(({ status }) => {\r\n      if(status === 404) {\r\n        console.log(`Creating Filters ${docId}`)\r\n        db.put({\r\n          _id: docId,\r\n          filters: filters[filterKeys[currentKey]]\r\n        }).then(() => {\r\n          console.log(`Creating Filters ${docId} (success)`)\r\n          this.checkFilter(filters, prefix, filterKeys, currentKey + 1)\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  checkView(views, viewKeys, currentKey) {\r\n    if(!currentKey) currentKey = 0\r\n    if(!viewKeys.length || viewKeys.length <= currentKey) {\r\n      this.messagesViewsInitialized = true\r\n      this.check()\r\n      return false\r\n    }\r\n\r\n    const docId = '_design/' + viewKeys[currentKey]\r\n    const db = getDb(viewKeys[currentKey], {live: false})\r\n\r\n    db.get(docId).then(row => {\r\n      let equal = true\r\n      if(row.views) {\r\n        Object.keys(views[viewKeys[currentKey]]).forEach(key => {\r\n          if(!row.views[key] || views[viewKeys[currentKey]][key].map !== row.views[key].map)\r\n            equal = false\r\n        })\r\n      }\r\n      else equal = false\r\n\r\n      if(equal) {\r\n        this.checkView(views, viewKeys, currentKey + 1)\r\n      }\r\n      else {\r\n        console.log(`Updateing Views ${docId}`)\r\n        db.put({\r\n          ...row,\r\n          views: views[viewKeys[currentKey]]\r\n        }).then(() => {\r\n          console.log(`Updateing Views ${docId} (success)`)\r\n          this.checkView(views, viewKeys, currentKey + 1)\r\n        })\r\n      }\r\n    }).catch(({ status }) => {\r\n      if(status === 404) {\r\n        console.log(`Creating Views ${docId}`)\r\n        db.put({\r\n          _id: docId,\r\n          views: views[viewKeys[currentKey]]\r\n        }).then(() => {\r\n          console.log(`Views Filters ${docId} (success)`)\r\n          this.checkView(views, viewKeys, currentKey + 1)\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (<div>{this.state.done && this.props.children}</div>)\r\n  }\r\n}\r\n\r\nexport default CheckDb\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Provider } from 'react-redux'\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\n\r\nimport Homepage from './homepage'\r\nimport CheckDb from './checkDb'\r\n\r\nconst Root = ({ store }) => (\r\n  <Provider store={store}>\r\n    <CheckDb>\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Homepage} />\r\n        </Switch>\r\n      </Router>\r\n    </CheckDb>\r\n  </Provider>\r\n)\r\n\r\nRoot.propTypes = {\r\n  store: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Root\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { persistentReducer } from 'redux-pouchdb-rethink'\r\nimport getDb from '../databases'\r\nimport { ADD_CHAT, REMOVE_CHAT } from '../actions/chats'\r\n\r\nconst initialState = []\r\n\r\nconst chats = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case ADD_CHAT:\r\n      return [...state, action.payload.chat]\r\n    case REMOVE_CHAT:\r\n      return state.filter(chat => chat.id !== action.payload)\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst db = getDb('chats')\r\n\r\nexport default persistentReducer(chats, {db: db, name: \"chats\"})\r\n","import { getToKeys, getFromKeys } from './allowedChats'\r\n\r\nconst form = {\r\n  \"type\": \"object\",\r\n  \"format\": \"grid\",\r\n  \"required\": [\r\n    \"from\",\r\n    \"to\",\r\n    \"title\",\r\n  ],\r\n  \"properties\": {\r\n    \"from\": {\r\n      \"type\": \"string\",\r\n      \"enum\": getFromKeys()\r\n    },\r\n    \"to\": {\r\n      \"type\": \"string\",\r\n      \"enum\": getToKeys()\r\n    },\r\n    \"title\": {\r\n      \"type\": \"string\",\r\n      \"description\": \"Title for this message\"\r\n    }\r\n  }\r\n}\r\n\r\nconst properties = [\r\n  {\r\n    \"scheme\": \"height\",\r\n    \"title\": \"PersonHeight\",\r\n    \"properties\": {\r\n      \"height\": {\r\n        \"type\": \"integer\",\r\n        \"default\": 12\r\n      }\r\n    }\r\n  },\r\n  {\r\n    \"scheme\": \"weight\",\r\n    \"title\": \"PersonWeight\",\r\n    \"properties\": {\r\n      \"weight\": {\r\n        \"type\": \"integer\",\r\n        \"default\": 12\r\n      }\r\n    }\r\n  },\r\n  {\r\n    \"scheme\": \"color\",\r\n    \"title\": \"PersonColor\",\r\n    \"properties\": {\r\n      \"color\": {\r\n        \"type\": \"string\",\r\n        \"format\": \"color\"\r\n      }\r\n    }\r\n  },\r\n  {\r\n    \"scheme\": \"name\",\r\n    \"title\": \"PersonName\",\r\n    \"properties\": {\r\n      \"name\": {\r\n        \"type\": \"string\",\r\n        \"format\": \"string\",\r\n      }\r\n    }\r\n  }\r\n]\r\n\r\nconst getMessageTypes = () => {\r\n  return properties.map(prop => {\r\n    return {\r\n      ...form,\r\n      scheme: prop.scheme,\r\n      title: prop.title,\r\n      properties: {\r\n        ...form.properties,\r\n        ...prop.properties\r\n      },\r\n      required: [\r\n        ...form.required,\r\n        prop.scheme\r\n      ]\r\n    }\r\n  })\r\n}\r\n\r\nexport default getMessageTypes\r\n","import { persistentReducer } from 'redux-pouchdb-rethink'\r\nimport getMessageTypes from '../defaults/messageTypes'\r\nimport getDb from '../databases'\r\n\r\nconst initialState = getMessageTypes()\r\n\r\nconst messageTypes = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst db = getDb('message-types')\r\n\r\nexport default persistentReducer(messageTypes, {db: db, name: \"message-types\"})\r\n","import getDb from '../databases'\r\nimport { SAVE_DRAFT, PUSH_MESSAGES, REMOVE_ALL_MESSAGES, UPDATE_MESSAGES, SEND_DRAFT_MESSAGE } from '../actions/messages'\r\n\r\nexport const db = getDb('messages')\r\nlet initialState = {}\r\n\r\nconst messages = (state = initialState, action) => {\r\n  console.log(action);\r\n  switch (action.type) {\r\n    case PUSH_MESSAGES:\r\n      let messages = initAdditionalAttributes(action.payload.messages)\r\n      if(messages.length === 1)\r\n        db.put(messages[0])\r\n      else {\r\n        db.bulkDocs(messages)\r\n      }\r\n      return state\r\n    case REMOVE_ALL_MESSAGES:\r\n      db.allDocs().then(result => {\r\n        return Promise.all(result.rows.map(row => {\r\n          if(row.id.search(\"_design\") === -1) {\r\n            return db.remove(row.id, row.value.rev)\r\n          }\r\n          return false\r\n        }));\r\n      })\r\n      return {}\r\n    case UPDATE_MESSAGES:\r\n      return {\r\n        ...state,\r\n        [action.payload.chatId]: action.payload.messages\r\n      }\r\n    case SAVE_DRAFT:\r\n      let message = {\r\n        ...(initAdditionalAttributes([action.payload.message])[0]),\r\n        draft: true\r\n      }\r\n\r\n      if(action.payload.message._id)\r\n        message._id = action.payload.message._id\r\n\r\n      if(action.payload.message._rev)\r\n        message._rev = action.payload.message._rev\r\n\r\n      db.put(message)\r\n\r\n      return state\r\n    case SEND_DRAFT_MESSAGE:\r\n      db.get(action.payload.message._id).then(row => {\r\n        db.bulkDocs([\r\n          {...initAdditionalAttributes([action.payload.message])[0], _rev: \"\"},\r\n          {...row, _deleted: true}\r\n        ])\r\n      })\r\n      return state\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst getId = (key) => {\r\n  return new Date().toISOString() + \"-\" + (key || '0')\r\n}\r\n\r\nconst initAdditionalAttributes = (messages) => {\r\n  return messages.map((message, key) => {\r\n    return {\r\n      ...message,\r\n      _id: getId(key),\r\n      draft: false\r\n    }\r\n  })\r\n}\r\n\r\nexport default messages\r\n","import { combineReducers } from 'redux'\r\nimport chats from './chats'\r\nimport messageTypes from './messageTypes'\r\nimport messages from './messages'\r\n\r\nexport default combineReducers({\r\n  chats,\r\n  messageTypes,\r\n  messages\r\n})\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Root from './components/root'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport '@json-editor/json-editor/src/styles/starrating.css'\r\nimport 'react-perfect-scrollbar/dist/css/styles.css'\r\nimport reducers from './reducers'\r\nimport { persistentStore } from 'redux-pouchdb-rethink'\r\nimport thunk from 'redux-thunk'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport getDb from './databases' \r\n\r\nconst applyMiddlewares = applyMiddleware(\r\n  thunk\r\n)\r\n\r\nconst db = getDb('main')\r\n\r\nconst createStoreWithMiddleware = composeWithDevTools(\r\n  applyMiddlewares,\r\n  persistentStore({db})\r\n)(createStore)\r\n\r\nconst store = createStoreWithMiddleware(reducers)\r\n\r\nReactDOM.render(\r\n  <Root store={store}/>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}