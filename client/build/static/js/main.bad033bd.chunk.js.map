{"version":3,"sources":["components/homepage/styles.js","actions/messages.js","actions/chats.js","actions/rewindPoints.js","defaults/messageTypesKeys.js","databases/index.js","defaults/allowedChats.js","components/control/rewindForm.js","components/control/styles.js","components/control/rewindList.js","containers/rewinds.js","components/control/index.js","containers/control.js","components/chatlist/styles.js","components/chat/messages/styles.js","defaults/schemeColors/theme.js","defaults/schemeColors/scheme.js","defaults/schemeColors/messageScheme.js","components/chat/messages/index.js","containers/messages.js","defaults/schemeColors/chatScheme.js","databases/views.js","databases/filters.js","components/chat/styles.js","components/chat/header.js","containers/chat/header.js","components/chat/form.js","components/chat/footer.js","containers/chat/footer.js","components/chat/index.js","containers/chat/index.js","defaults/schemeSizes.js","components/chatlist/index.js","containers/chatlist.js","components/homepage/index.js","components/checkDb.js","components/pouchStore/index.js","containers/pouchStore.js","actions/init.js","components/root.js","serviceWorker.js","reducers/chats.js","defaults/messageTypes.js","reducers/messageTypes.js","reducers/messages.js","reducers/rewindPoints.js","reducers/index.js","middlewares/pouchdb/rewindPoints.js","middlewares/pouchdb/index.js","index.js"],"names":["StyleSheet","create","main","padding","PUSH_MESSAGES","REMOVE_ALL_MESSAGES","UPDATE_MESSAGES","SAVE_DRAFT","SEND_DRAFT_MESSAGE","saveDraft","draftMessage","type","payload","message","ADD_CHAT","REMOVE_CHAT","CREATE_REWIND_POINT","REMOVE_REWIND_POINT","SELECT_REWIND_POINT","UPDATE_REWIND_POINTS","options","showOnGameControl","chatAddBtnSettings","defaultOptions","showOnGameControlCreateChats","addChatIdToChatFromArray","addChatIdToChatToArray","preFillFrom","chats","chatId","label","Object","objectSpread","getGameControlChats","filter","chat","RewindForm","_ref","createRewindPoint","input","React","createRef","react_default","a","createElement","CardFooter","onSubmit","e","preventDefault","current","value","length","InputGroup","Input","innerRef","placeholder","InputGroupAddon","addonType","Button","color","hide","display","createMessage","createMessageShow","RewindList","rewinds","selectRewindPoint","removeRewindPoint","CardBody","className","css","styles","ListGroup","map","_ref2","key","doc","ListGroupItem","tag","active","onClick","_id","name","RewindsContainer","connect","state","rewindPoints","points","activeRewind","dispatch","id","ChatControll","props","content","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","newMessageForm","bind","assertThisInitialized","closeMessageForm","injectForm","generateMessages","editor","editorRef","activeSchema","createChats","count","_this2","createMessages","Array","apply","messageType","messageTypes","Math","floor","random","required","reduce","field","enumArr","properties","enum","isArray","format","toString","loremIpsum","default","target","destroy","setState","schema","from","sort","x","y","JSONEditor","theme","validate","getValue","_this3","Row","Col","md","Card","CardHeader","parseInt","title","includes","removeChat","createChat","rewindForm","containers_rewinds","block","clearMessages","ref","Component","ControlContainer","scheme","messages","pointName","database","db","Control","chatItem","paddingBottom","height","position","paddingTop",":after","width","top","background","left",":before","bottom","zIndex","container","maxHeight","item","verticalAligin","maxWidth","scrolContent","badge","fontSize","lineHeight","borderRadius","overflow","opacity",":hover","badgeLeft","badgeBg","scrollbar","boxSizing","margin","bg","blue","gray","green","red","yellow","black","white","lightBlue","lightGray","lightBlack","buttons","transparent","text","ColorScheme","itemId","items","itemDefault","global","getItemScheme","getGlobalScheme","MessageScheme","ChatMessages","timeId","loadTimeId","loading","scrolledDown","loadMoreCount","getScrollHeight","onScrollUp","onYReachStart","onYReachEnd","scrollToDown","firstScrolled","showItemsCount","clearTimeout","setTimeout","currentHeigth","_container","scrollTop","scrollHeight","newItemsCount","fromChat","colorScheme","MessageColorScheme","itemStyles","textAlign","style","classNames","keys","charAt","_this4","lib_default","suppressScrollX","contentClassName","slice","max","msg","renderItem","MessagesContainer","Messages","ChatScheme","btn","body","footer","light","tab","activeTab","cn","require","dbOptions","getDb","dbKey","sync","optionsManual","PouchDB","optLoc","remote","remoteDB","replicate","to","live","retry","on","done","console","log","forEach","concat","views","query","view","params","namespace","split","catch","err","Error","status","put","then","cloneFilter","filters","prefix","right","labelContainer","labelButton","paddingRight","paddingLeft","ChatHeader","button","children","defaultMessageType","createDraft","defaultValues","HeaderContainer","find","Header","ChatForm","initForm","submitForm","getFormFilteredData","editorBox","hiddenAutofillKeys","setValue","form","values","formFiltered","toConsumableArray","messageFiltered","requiredKey","indexOf","splice","formData","_loop","editors","hasOwnProperty","watch","data","defineProperty","replace","getEditor","sendDraftMessage","ChatFooter","renderDropdown","toggle","toggleDropdown","renderTabs","showDropdownAfter","activeDraft","dropdownOpen","Dropdown","isOpen","DropdownToggle","caret","DropdownMenu","DropdownItem","Nav","tabs","NavItem","NavLink","TabContent","TabPane","tabId","chat_form","FooterContainer","draft","Footer","Chat","updateState","f","changeTimer","include_docs","rows","updateMessages","changeTime","initDatabase","dbName","changes","ChatColorScheme","getScheme","isActiveRewind","local","newDb","cancel","since","chat_header","containers_messages","chat_footer","ChatContainer","point","Chatlist","xs","chatSizes","sm","containers_chat","ChatsContainer","stage","Chats","Homepage","Container","fluid","containers_chatlist","containers_control","CheckDb","check","messagesFiltersInitialized","messagesViewsInitialized","checkMessages","checkFilter","checkView","filterKeys","currentKey","docId","get","row","equal","viewKeys","PouchStore","initStore","PouchStoreContainer","Root","store","es","containers_pouchStore","checkDb","BrowserRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","initialState","persistentReducer","arguments","undefined","action","description","weight","prop","getMessageTypes","getId","Date","toISOString","initAdditionalAttributes","bulkDocs","allDocs","result","Promise","all","search","remove","rev","_rev","_deleted","combineReducers","cloneDatabase","resolve","reject","messagesDbName","messagesRemoteDbName","doneRemote","init","updateLocalRewindPoints","rewindPoint","roomId","next","messagesDb","clonedData","changedDocs","rewindPointsDb","pouchdbMiddleware","applyMiddlewares","applyMiddleware","thunk","pouchdbSync","composeWithDevTools","persistentStore","createStore","createStoreWithMiddleware","reducers","ReactDOM","render","root","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bad033bd.chunk.js","sourcesContent":["import { StyleSheet } from 'aphrodite'\r\n\r\nexport default StyleSheet.create({\r\n  main: {\r\n    padding: '15px 0'\r\n  },\r\n})\r\n","/*\r\n * action types\r\n */\r\n\r\nexport const PUSH_MESSAGES = \"PUSH_MESSAGES\"\r\nexport const REMOVE_ALL_MESSAGES = \"REMOVE_ALL_MESSAGES\"\r\nexport const GENERATE_RANDOM_MESSAGES = \"PUSH_MESSAGES\"\r\nexport const UPDATE_MESSAGES = \"UPDATE_MESSAGES\"\r\nexport const SAVE_DRAFT = \"SAVE_DRAFT\"\r\nexport const SEND_DRAFT_MESSAGE = \"SEND_DRAFT_MESSAGE\"\r\n\r\n/*\r\n * action creators\r\n */\r\n\r\nexport function sendDraftMessage(draftMessage) {\r\n  return { type: SEND_DRAFT_MESSAGE, payload: { message: draftMessage } }\r\n}\r\n\r\nexport function saveDraft(draftMessage) {\r\n  return { type: SAVE_DRAFT, payload: { message: draftMessage } }\r\n}\r\n\r\nexport function createMessages(messages) {\r\n  return { type: PUSH_MESSAGES, payload: { messages: messages } }\r\n}\r\n\r\nexport function removeAllMessages() {\r\n  return { type: REMOVE_ALL_MESSAGES }\r\n}\r\n\r\nexport function updateMessages(messages, chatId) {\r\n  return { type: UPDATE_MESSAGES, payload: { messages: messages, chatId: chatId} }\r\n}\r\n","/*\r\n * action types\r\n */\r\n\r\nexport const ADD_CHAT = \"ADD_CHAT\"\r\nexport const REMOVE_CHAT = \"REMOVE_CHAT\"\r\n\r\n/*\r\n * action creators\r\n */\r\n\r\nexport function createChat({chatId, label}) {\r\n  return { type: ADD_CHAT, payload: { chat: { id: chatId, label: label } } }\r\n}\r\n\r\nexport function removeChat(chatId) {\r\n  return { type: REMOVE_CHAT, payload: chatId }\r\n}\r\n","/*\r\n * action types\r\n */\r\nexport const CREATE_REWIND_POINT = \"CREATE_REWIND_POINT\"\r\nexport const REMOVE_REWIND_POINT = \"REMOVE_REWIND_POINT\"\r\nexport const SELECT_REWIND_POINT = \"SELECT_REWIND_POINT\"\r\nexport const UPDATE_REWIND_POINTS = \"UPDATE_REWIND_POINTS\"\r\n\r\n/*\r\n * action creators\r\n */\r\n\r\nexport function createRewindPoint(pointName, database) {\r\n  return { type: CREATE_REWIND_POINT, payload: { name: pointName, db: database }}\r\n}\r\n\r\nexport function removeRewindPoint(pointId) {\r\n  return { type: REMOVE_REWIND_POINT, payload: { id: pointId } }\r\n}\r\n\r\nexport function selectRewindPoint(pointId) {\r\n  return { type: SELECT_REWIND_POINT, payload: { id: pointId } }\r\n}\r\n\r\nexport function updateRewindPoints(points) {\r\n  return { type: UPDATE_REWIND_POINTS, payload: { points: points } }\r\n}\r\n","// this message types will be shown in game control inject message list\r\nexport const showOnGameControl = [\r\n  \"height\", \"color\", \"weight\",\r\n]\r\n\r\n// this message type will be used on chat header add button click\r\nexport const chatAddBtnSettings = {\r\n  scheme: \"name\",\r\n  format: \"table\" //grid\r\n}\r\n","import PouchDB from 'pouchdb-browser'\r\nimport defaultOptions from './config-default.json'\r\nlet options;\r\n\r\ntry {\r\n options = require('./config-local.json')\r\n}\r\ncatch (e) {\r\n options = {}\r\n}\r\n\r\noptions = {\r\n  ...defaultOptions,\r\n  ...options\r\n}\r\n\r\nexport const dbOptions = {...options}\r\n\r\nconst getDb = (dbKey, sync, optionsManual) => {\r\n\r\n  if(!options[dbKey] && !optionsManual)\r\n    return new PouchDB(dbKey)\r\n\r\n  if(!optionsManual) optionsManual = {}\r\n\r\n  const optLoc = options[dbKey] ? {...options[dbKey], ...optionsManual} : optionsManual\r\n\r\n  const db = new PouchDB(optLoc.name || dbKey)\r\n\r\n  if(optLoc.remote && sync) {\r\n    const remoteDB = new PouchDB(optLoc.remote)\r\n\r\n    db.replicate.to(remoteDB, {\r\n      live: optLoc.live,\r\n      retry: optLoc.retry\r\n    }).on('complete', done => {\r\n      console.log('complete', done)\r\n    })\r\n\r\n    db.replicate.from(remoteDB, {\r\n      live: optLoc.live,\r\n      retry: optLoc.retry\r\n    }).on('complete', done => {\r\n      console.log('complete from', done)\r\n    })\r\n  }\r\n  return db\r\n}\r\n\r\nexport default getDb\r\n/*\r\ndb.fullySync(remoteDB, {\r\n  live: true,\r\n  retry: true\r\n}).on('change', function (info) {\r\n  // handle change\r\n}).on('paused', function () {\r\n  // replication paused (e.g. user went offline)\r\n}).on('active', function () {\r\n  // replicate resumed (e.g. user went back online)\r\n}).on('denied', function (info) {\r\n  // a document failed to replicate, e.g. due to permissions\r\n}).on('complete', function (info) {\r\n  // handle complete\r\n}).on('error', function (err) {\r\n  // handle error\r\n});\r\n*/\r\n","const defaultOptions = {\r\n  showOnGameControlCreateChats: true,\r\n  addChatIdToChatFromArray: true,\r\n  addChatIdToChatToArray: true,\r\n  preFillFrom: false\r\n}\r\n\r\nconst chats = [\r\n  {\r\n    chatId: \"red\",\r\n    label:\"Red Chat\",\r\n    options: {\r\n      ...defaultOptions\r\n    }\r\n  },\r\n  {\r\n    chatId: \"blue\",\r\n    label:\"Blue Chat\",\r\n    options: {\r\n      ...defaultOptions\r\n    }\r\n  },\r\n  {\r\n    chatId: \"white\",\r\n    label:\"White Chat\",\r\n    options: {\r\n      ...defaultOptions,\r\n      addChatIdToChatToArray: false,\r\n      preFillFrom: true\r\n    }\r\n  }\r\n]\r\n\r\nexport const getToKeys = () => {\r\n  return chats\r\n          .filter(chat => chat.options.addChatIdToChatToArray)\r\n          .map(chat => chat.chatId)\r\n}\r\nexport const getFromKeys = () => {\r\n  return chats\r\n          .filter(chat => chat.options.addChatIdToChatFromArray)\r\n          .map(chat => chat.chatId)\r\n}\r\n\r\nexport const getGameControlChats = () => {\r\n  return chats\r\n          .filter(chat => chat.options.showOnGameControlCreateChats)\r\n}\r\n\r\nexport default chats\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { CardFooter, InputGroup, Button, InputGroupAddon, Input } from 'reactstrap'\r\n\r\nconst RewindForm = ({createRewindPoint}) => {\r\n  const input = React.createRef()\r\n\r\n  const onFormSubmit = e => {\r\n    e.preventDefault()\r\n\r\n    if(input.current.value && input.current.value.length) {\r\n      createRewindPoint(input.current.value)\r\n      input.current.value = \"\"\r\n    }\r\n  }\r\n\r\n  return (\r\n    <CardFooter>\r\n      <form onSubmit={onFormSubmit}>\r\n        <InputGroup>\r\n          <Input innerRef={input} placeholder=\"New rewind point\"/>\r\n          <InputGroupAddon addonType=\"append\">\r\n            <Button color=\"warning\">Create</Button>\r\n          </InputGroupAddon>\r\n        </InputGroup>\r\n      </form>\r\n    </CardFooter>\r\n  )\r\n}\r\n\r\nRewindForm.propTypes = {\r\n  createRewindPoint: PropTypes.func.isRequired\r\n}\r\n\r\nexport default RewindForm\r\n","import { StyleSheet } from 'aphrodite'\r\n\r\nexport default StyleSheet.create({\r\n  main: {\r\n    padding: '15px 0'\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  createMessage: {\r\n    display: 'none',\r\n  },\r\n  createMessageShow: {\r\n    display: 'block',\r\n  }\r\n})\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {CardBody, ListGroup, ListGroupItem } from 'reactstrap'\r\n\r\nimport { css } from 'aphrodite/no-important'\r\nimport styles from './styles'\r\n\r\nconst RewindList = ({ rewinds, removeRewindPoint, selectRewindPoint }) => {\r\n\r\n  return (\r\n    <CardBody className={css(!rewinds.length && styles.hide)}>\r\n      <p>Rewind Points:</p>\r\n      <ListGroup>\r\n        {rewinds.map(({doc}, key) => (\r\n          <ListGroupItem\r\n            key={key}\r\n            tag=\"button\"\r\n            active={doc.active}\r\n            onClick={() => {selectRewindPoint(doc._id)}}\r\n          >\r\n            {doc.name}\r\n          </ListGroupItem>\r\n        ))}\r\n      </ListGroup>\r\n    </CardBody>\r\n  )\r\n}\r\n\r\nRewindList.propTypes = {\r\n  removeRewindPoint: PropTypes.func.isRequired,\r\n  selectRewindPoint: PropTypes.func.isRequired,\r\n  rewinds: PropTypes.array.isRequired\r\n}\r\n\r\nexport default RewindList\r\n","import { connect } from 'react-redux'\r\nimport RewindList from '../components/control/rewindList'\r\nimport { removeRewindPoint, selectRewindPoint } from '../actions/rewindPoints'\r\n\r\nconst mapStateToProps = (state) => ({\r\n  rewinds: state.rewindPoints.points,\r\n  active: state.rewindPoints.activeRewind,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  removeRewindPoint: (id) => {\r\n    dispatch(removeRewindPoint(id))\r\n  },\r\n  selectRewindPoint: (id) => {\r\n    dispatch(selectRewindPoint(id))\r\n  },\r\n})\r\n\r\nconst RewindsContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(RewindList)\r\n\r\nexport default RewindsContainer\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Row, Col, Card, CardHeader, CardBody, CardFooter, Button, ListGroup, ListGroupItem } from 'reactstrap'\r\nimport JSONEditor from '@json-editor/json-editor'\r\nimport loremIpsum from 'lorem-ipsum'\r\nimport { getGameControlChats } from '../../defaults/allowedChats'\r\nimport RewindForm from './rewindForm'\r\nimport RewindList from '../../containers/rewinds'\r\n\r\nimport { css } from 'aphrodite/no-important'\r\nimport styles from './styles'\r\n\r\nclass ChatControll extends Component {\r\n  constructor(props, content) {\r\n    super(props, content)\r\n\r\n    this.newMessageForm = this.newMessageForm.bind(this)\r\n    this.closeMessageForm = this.closeMessageForm.bind(this)\r\n    this.injectForm = this.injectForm.bind(this)\r\n    this.generateMessages = this.generateMessages.bind(this)\r\n    this.editor = null\r\n    this.editorRef = React.createRef()\r\n\r\n    this.state = {\r\n      activeSchema: null,\r\n      createChats: getGameControlChats()\r\n    }\r\n  }\r\n\r\n  generateMessages(count) {\r\n    this.props.createMessages(Array.apply(null, Array(count)).map(() => {\r\n      const messageType = this.props.messageTypes[Math.floor(Math.random()*this.props.messageTypes.length)]\r\n      return messageType.required.reduce((map, field) => {\r\n\r\n        let value = \"\"\r\n        const enumArr = messageType.properties[field].enum;\r\n        if(Array.isArray(enumArr) && enumArr.length) {\r\n          value = enumArr[Math.floor(Math.random()*enumArr.length)]\r\n        }\r\n        else if(messageType.properties[field].format === \"color\") {\r\n          value = '#'+Math.floor(Math.random()*16777215).toString(16)\r\n        }\r\n        else {\r\n          switch (messageType.properties[field].type) {\r\n            case \"integer\":\r\n              value = Math.floor(Math.random()*999)\r\n              break;\r\n            case \"string\":\r\n              value = loremIpsum({count: 1})\r\n              break;\r\n            default:\r\n              value = messageType.properties[field].default || loremIpsum({count: 1})\r\n          }\r\n        }\r\n\r\n        map[field] = value\r\n        return map\r\n      }, {})\r\n    }));\r\n  }\r\n\r\n  newMessageForm(e) {\r\n    if(this.state.activeSchema !== e.target.name) {\r\n      if(this.editor)\r\n        this.editor.destroy()\r\n\r\n      this.setState({activeSchema: e.target.name})\r\n      let schema = this.props.messageTypes[e.target.name]\r\n      schema.properties.from.enum = schema.properties.from.enum.sort((x, y) => (x === \"white\" ? -1 : y === \"white\" ? 1 : 0))\r\n\r\n      this.editor = new JSONEditor(this.editorRef.current, {\r\n        schema: schema,\r\n        theme: 'bootstrap4'\r\n      })\r\n    }\r\n    else\r\n      this.closeMessageForm()\r\n  }\r\n\r\n  closeMessageForm() {\r\n    this.editor.destroy()\r\n    this.setState({activeSchema: null})\r\n  }\r\n\r\n  injectForm() {\r\n    if(!(this.editor.validate()).length) {\r\n      this.props.createMessages([this.editor.getValue()])\r\n      this.closeMessageForm()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={css(styles.main)}>\r\n        <Row className=\"main\">\r\n          <Col md={4}>\r\n            <Card>\r\n              <CardHeader>Game Control</CardHeader>\r\n              <CardBody>\r\n                <p>Inject Messages:</p>\r\n                <ListGroup>\r\n                  {this.props.messageTypes.map((schema, key) => (\r\n                    <ListGroupItem\r\n                      key={key}\r\n                      tag=\"button\"\r\n                      active={key === parseInt(this.state.activeSchema)}\r\n                      onClick={this.newMessageForm}\r\n                      name={key}\r\n                    >\r\n                      {schema.title}\r\n                    </ListGroupItem>\r\n                  ))}\r\n                </ListGroup>\r\n              </CardBody>\r\n              {(!!this.state.createChats.length) && <CardBody>\r\n                <p>Create chats:</p>\r\n                <ListGroup>\r\n                  {this.state.createChats.map((chat, key) => {\r\n                    const active = this.props.chats.includes(chat.chatId)\r\n                    return (\r\n                      <ListGroupItem\r\n                        key={key}\r\n                        tag=\"button\"\r\n                        active={active}\r\n                        onClick={() => {\r\n                          if (active)\r\n                            this.props.removeChat(chat.chatId)\r\n                          else\r\n                            this.props.createChat(chat)\r\n                        }}\r\n                      >\r\n                        {chat.label}\r\n                      </ListGroupItem>\r\n                    )\r\n                  })}\r\n                </ListGroup>\r\n              </CardBody>}\r\n              <RewindForm createRewindPoint={this.props.createRewindPoint}/>\r\n              <RewindList/>\r\n              <CardFooter>\r\n                <Button block color=\"success\" onClick={() => {this.generateMessages(50)}}>Generate 50 Messages</Button>\r\n                <Button block color=\"success\" onClick={() => {this.generateMessages(100)}}>Generate 100 Messages</Button>\r\n                <Button block color=\"success\" onClick={() => {this.generateMessages(1000)}}>Generate 1000 Messages</Button>\r\n              </CardFooter>\r\n              <CardFooter>\r\n                <Button block color=\"danger\" onClick={this.props.clearMessages}>Clear Messages</Button>\r\n              </CardFooter>\r\n            </Card>\r\n          </Col>\r\n          <Col md={8}>\r\n            <div className={css(styles.createMessage, this.state.activeSchema && styles.createMessageShow)}>\r\n              <Card>\r\n                <CardBody>\r\n                  <div ref={this.editorRef}/>\r\n                </CardBody>\r\n                <CardFooter>\r\n                  <Button color=\"success\" onClick={this.injectForm}>Inject</Button>\r\n                </CardFooter>\r\n              </Card>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nChatControll.propTypes = {\r\n  messageTypes: PropTypes.array,\r\n  clearMessages: PropTypes.func.isRequired,\r\n  createRewindPoint: PropTypes.func.isRequired,\r\n  createMessages: PropTypes.func.isRequired,\r\n  createChat: PropTypes.func.isRequired,\r\n  removeChat: PropTypes.func.isRequired,\r\n  chats: PropTypes.array,\r\n}\r\n\r\nexport default ChatControll\r\n","import { connect } from 'react-redux'\r\nimport { createMessages, removeAllMessages } from '../actions/messages'\r\nimport { createChat, removeChat } from '../actions/chats'\r\nimport { createRewindPoint } from '../actions/rewindPoints'\r\nimport { showOnGameControl } from '../defaults/messageTypesKeys'\r\n\r\nimport Control from '../components/control'\r\n\r\nconst mapStateToProps = state => ({\r\n  messageTypes: state.messageTypes.filter(type => (showOnGameControl.includes(type.scheme))),\r\n  chats: state.chats.map((chat) => chat && chat.id)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n  return {\r\n    createMessages: (messages) => {\r\n      dispatch(createMessages(messages))\r\n    },\r\n    clearMessages: () => {\r\n      dispatch(removeAllMessages())\r\n    },\r\n    createChat: (chat) => {\r\n      dispatch(createChat(chat))\r\n    },\r\n    removeChat: (id) => {\r\n      dispatch(removeChat(id))\r\n    },\r\n    createRewindPoint: (pointName) => {\r\n      dispatch(createRewindPoint(pointName, 'messages'))\r\n    },\r\n  }\r\n}\r\n\r\nconst ControlContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Control)\r\n\r\nexport default ControlContainer\r\n","import { StyleSheet } from 'aphrodite'\r\n\r\nexport default StyleSheet.create({\r\n  chatItem: {\r\n    paddingBottom: '15px'\r\n  },\r\n})\r\n","import { StyleSheet } from 'aphrodite/no-important'\r\n\r\nexport default StyleSheet.create({\r\n  main: {\r\n    height: '320px',\r\n    position: 'relative',\r\n    paddingTop: '0.1px',\r\n    \":after\": {\r\n      content: '\"\"',\r\n      display: 'block',\r\n      position: 'absolute',\r\n      width: \"100%\",\r\n      height: '20px',\r\n      top: '100%',\r\n      background: \"linear-gradient(to bottom, rgba(255,255,255,0) 0%,rgba(255,255,255,1) 100%)\",\r\n      left: '0',\r\n    },\r\n    \":before\": {\r\n      content: '\"\"',\r\n      display: 'block',\r\n      position: 'absolute',\r\n      width: \"100%\",\r\n      height: '20px',\r\n      bottom: '100%',\r\n      left: '0',\r\n      zIndex: '2',\r\n      background: \"linear-gradient(to bottom, rgba(255,255,255,1) 0%,rgba(255,255,255,0) 100%)\",\r\n    }\r\n  },\r\n  container: {\r\n    position: 'absolute',\r\n    maxHeight: '100%',\r\n    height: 'auto',\r\n    left: '0',\r\n    bottom: '0',\r\n    width: '100%'\r\n  },\r\n  item: {\r\n    display: 'inline-block',\r\n    verticalAligin: 'top',\r\n    maxWidth: \"100%\",\r\n  },\r\n  scrolContent: {\r\n    padding: '20px'\r\n  },\r\n  badge: {\r\n    maxWidth: \"100%\",\r\n    fontSize: '16px',\r\n    lineHeight: '20px',\r\n    padding: '5px 15px',\r\n    borderRadius: '15px 0 15px 15px',\r\n    position: 'relative',\r\n    overflow: 'hidden',\r\n    display: 'inline-block',\r\n    verticalAligin: 'top',\r\n    opacity: '0.9',\r\n    color: '#fff',\r\n    ':hover': {\r\n      opacity: '1'\r\n    }\r\n  },\r\n  badgeLeft: {\r\n    borderRadius: '0 15px 15px 15px',\r\n  },\r\n  badgeBg: {\r\n    opacity: '0.8',\r\n    position: 'absolute',\r\n    left: '0',\r\n    bottom: '0',\r\n    height: '100%',\r\n    width: '100%'\r\n  },\r\n  message: {\r\n    position: 'relative'\r\n  },\r\n  scrollbar: {\r\n    boxSizing: 'content-box',\r\n    width: '100%',\r\n    padding: '20px',\r\n    margin: '-20px 0 0 -20px',\r\n    position: 'relative',\r\n    height: '100%'\r\n  }\r\n})\r\n","export const bg = {\r\n  blue: \"bg-primary\",\r\n  gray: \"bg-secondary\",\r\n  green: \"bg-success\",\r\n  red: \"bg-danger\",\r\n  yellow: \"bg-warning\",\r\n  black: \"bg-dark\",\r\n  white: \"bg-white\",\r\n  lightBlue: \"bg-info\",\r\n  lightGray: \"bg-light\",\r\n  lightBlack: \"bg-muted\",\r\n}\r\n\r\nexport const buttons = {\r\n  transparent: \"link\",\r\n  blue: \"primary\",\r\n  gray: \"secondary\",\r\n  green: \"success\",\r\n  red: \"danger\",\r\n  yellow: \"warning\",\r\n  lightBlue: \"info\",\r\n}\r\n\r\nexport const text = {\r\n  blue: \"text-primary\",\r\n  gray: \"text-secondary\",\r\n  green: \"text-success\",\r\n  red: \"text-danger\",\r\n  yellow: \"text-warning\",\r\n  black: \"text-dark\",\r\n  white: \"text-white\",\r\n  lightBlue: \"text-info\",\r\n  lightGray: \"text-light\",\r\n  lightBlack: \"text-muted\",\r\n}\r\n\r\nconst theme = {\r\n  bg: bg,\r\n  buttons: buttons,\r\n  text: text\r\n}\r\n\r\nexport default theme\r\n","class ColorScheme {\r\n\r\n  constructor(id) {\r\n    this.itemId = id\r\n    this.items = {}\r\n    this.itemDefault = {}\r\n    this.global = {}\r\n  }\r\n\r\n  getGlobalScheme() {\r\n    return this.global\r\n  }\r\n\r\n  getItemScheme() {\r\n    return {\r\n      ...this.itemDefault,\r\n      ...(this.items[this.itemId] || {})\r\n    }\r\n  }\r\n\r\n  getScheme() {\r\n    return {\r\n      item: this.getItemScheme(),\r\n      global: this.getGlobalScheme(),\r\n    }\r\n  }\r\n}\r\n\r\nexport default ColorScheme\r\n","import { bg, text } from './theme'\r\nimport ColorScheme from './scheme'\r\n\r\nclass MessageScheme extends ColorScheme {\r\n\r\n  constructor(chatId) {\r\n    super(chatId)\r\n\r\n    this.items = {\r\n      red: {\r\n        bg: bg.red,\r\n      },\r\n      blue: {\r\n        bg: bg.blue,\r\n      }\r\n    }\r\n\r\n    this.itemDefault = {\r\n      bg: bg.gray,\r\n      text: text.white,\r\n    }\r\n  }\r\n}\r\n\r\nexport default MessageScheme\r\n","import React, { Component, createRef } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { css } from 'aphrodite/no-important'\r\nimport styles from './styles'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport MessageColorScheme from '../../../defaults/schemeColors/messageScheme'\r\nimport classNames from 'classnames/bind'\r\n\r\nclass ChatMessages extends Component {\r\n  constructor(props, content) {\r\n    super(props, content)\r\n\r\n    this.timeId = null\r\n    this.loadTimeId = null\r\n    this.loading = false\r\n    this.scrolledDown = true\r\n    this.scrollbar = createRef()\r\n    this.loadMoreCount = 10\r\n\r\n    this.getScrollHeight = this.getScrollHeight.bind(this)\r\n    this.onScrollUp = this.onScrollUp.bind(this)\r\n    this.onYReachStart = this.onYReachStart.bind(this)\r\n    this.onYReachEnd = this.onYReachEnd.bind(this)\r\n    this.scrollToDown = this.scrollToDown.bind(this)\r\n    this.firstScrolled = false\r\n\r\n    this.state = {\r\n      showItemsCount: 10,\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearTimeout(this.loadTimeId)\r\n  }\r\n\r\n  onScrollUp() {\r\n    this.scrolledDown = false\r\n  }\r\n\r\n  onYReachEnd() {\r\n    this.scrolledDown = true\r\n  }\r\n\r\n  onYReachStart() {\r\n\r\n    if(this.loadTimeId)\r\n      clearTimeout(this.loadTimeId)\r\n\r\n    this.loadTimeId = setTimeout(() => {\r\n      const currentHeigth = this.getScrollHeight()\r\n      if(!this.scrolledDown && !this.loading) {\r\n        this.loading = true\r\n        this.setState({showItemsCount: this.state.showItemsCount + this.loadMoreCount})\r\n        setTimeout(() => {\r\n          if(this.scrollbar.current)\r\n            this.scrollbar.current._container.scrollTop = this.getScrollHeight() - currentHeigth\r\n          this.loading = false\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  getScrollHeight() {\r\n    return this.scrollbar.current ? this.scrollbar.current._container.scrollHeight : 0\r\n  }\r\n\r\n  scrollToDown() {\r\n    if(this.timeId)\r\n      clearTimeout(this.timeId)\r\n\r\n    this.timeId = setTimeout(() => {\r\n      if(this.scrollbar.current) {\r\n        this.scrollbar.current._container.scrollTop = this.getScrollHeight()\r\n        this.firstScrolled = true\r\n      }\r\n      else {\r\n        if(!this.firstScrolled) {\r\n          this.timeId = setTimeout(() => {\r\n            this.scrollToDown()\r\n          }, 512)\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    if(this.props.messages.length !== 0 && props.messages.length > this.state.showItemsCount && this.props.messages.length < props.messages.length) {\r\n      let newItemsCount = props.messages.length - this.props.messages.length\r\n      this.setState({showItemsCount: this.state.showItemsCount + (newItemsCount > this.loadMoreCount ? this.loadMoreCount : newItemsCount) })\r\n    }\r\n\r\n    this.scrollToDown()\r\n  }\r\n\r\n  renderItem(message) {\r\n    if(!message) return \"\"\r\n    const fromChat = message.from === this.props.chatId\r\n    const colorScheme = (new MessageColorScheme(message.from)).getItemScheme()\r\n    let itemStyles = {}\r\n\r\n    if(fromChat) {\r\n      itemStyles = { textAlign: 'right' }\r\n    }\r\n\r\n    return(\r\n      <div style={itemStyles}>\r\n        <div className={css(styles.item)}>\r\n          <div className={css(styles.badge, (!fromChat) && styles.badgeLeft)}>\r\n            <div className={classNames(css(styles.badgeBg), colorScheme.bg)}/>\r\n            <div className={classNames(css(styles.message), colorScheme.text)}>\r\n              {Object.keys(message).map(key => (key.charAt(0) !== '_' && message[key] && <div key={key}><strong>{key}:</strong> {message[key]}</div>))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={css(styles.main)}>\r\n        <div className={css(styles.scrollbar)}>\r\n          <PerfectScrollbar\r\n            ref={this.scrollbar}\r\n            onYReachEnd={this.onYReachEnd}\r\n            onScrollUp={this.onScrollUp}\r\n            onYReachStart={this.onYReachStart}\r\n            suppressScrollX={true}\r\n            className={css(styles.container)}\r\n            contentClassName={css(styles.scrolContent)}\r\n          >\r\n            <div className={css(styles.scrolContent)}>\r\n              {this.props.messages.slice(Math.max(this.props.messages.length - this.state.showItemsCount, 0)).map((msg, key) => (\r\n                <div key={key}>{this.renderItem(msg.doc)}</div>\r\n              ))}\r\n            </div>\r\n          </PerfectScrollbar>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nChatMessages.propTypes = {\r\n  messages: PropTypes.array.isRequired,\r\n  chatId: PropTypes.string.isRequired\r\n}\r\n\r\nexport default ChatMessages\r\n","import { connect } from 'react-redux'\r\nimport Messages from '../components/chat/messages'\r\n\r\nconst mapStateToProps = (state, { chatId }) => {\r\n  return {\r\n    messages: (state.messages && Array.isArray(state.messages[chatId])) ? state.messages[chatId] : [],\r\n    chatId: chatId\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {}\r\n}\r\n\r\nconst MessagesContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Messages)\r\n\r\nexport default MessagesContainer\r\n","import { bg, buttons, text } from './theme'\r\nimport ColorScheme from './scheme'\r\nimport cn from 'classnames'\r\n\r\nclass ChatScheme extends ColorScheme {\r\n\r\n  constructor(chatId) {\r\n    super(chatId)\r\n\r\n    this.items = {\r\n      red: {\r\n        bg: bg.red,\r\n        text: text.white\r\n      },\r\n      blue: {\r\n        bg: bg.blue,\r\n        text: text.white\r\n      }\r\n    }\r\n\r\n    this.itemDefault = {\r\n      bg: bg.lightGray,\r\n      text: text.black,\r\n      btn: buttons.gray\r\n    }\r\n\r\n    this.global = {\r\n      body: bg.white,\r\n      footer: bg.light,\r\n      tab: bg.white,\r\n      activeTab: cn(bg.blue, text.white),\r\n    }\r\n  }\r\n}\r\n\r\nexport default ChatScheme\r\n","import chats from '../defaults/allowedChats'\r\n\r\n// declare the messages views\r\nlet messages = {}\r\nchats.forEach(({chatId}) => {\r\n  messages[chatId] = {\r\n    map: `function (doc) { if(doc.to === \"${chatId}\" && doc.draft === false || doc.from === \"${chatId}\") emit(doc.id); }`\r\n  }\r\n})\r\n\r\n// declare the views\r\nexport const views = {\r\n  messages: messages\r\n}\r\n\r\n// query couchdb views\r\nexport const query = (db, view, params) => {\r\n  const namespace = view.split('/')[0]\r\n\r\n  return db.query(view, params).catch(err => {\r\n    if (!views[namespace]) throw new Error('View ' + namespace + ' is not defined.')\r\n\r\n    // if view doesn't exist, create it, and try again\r\n    if (err.status === 404) {\r\n      return db.put({\r\n        _id: '_design/' + namespace,\r\n        views: views[namespace]\r\n      }).then(() => (query(db, view, params)))\r\n    }\r\n  })\r\n}\r\n\r\nexport default views\r\n","import chats from '../defaults/allowedChats'\r\n/* pouchdb filter management\r\n */\r\n\r\n // declare the messages filters\r\nlet messages = {\r\n  cloneFilter: 'function (doc) { return !doc._deleted; }'\r\n}\r\nchats.forEach(({chatId}) => {\r\n  messages[chatId] = `function (doc) { return doc.to === \"${chatId}\" && doc.draft === false || doc.from === \"${chatId}\"; }`\r\n})\r\n\r\n// declare the filters\r\nexport const filters = {\r\n  messages: messages\r\n}\r\n\r\nexport const prefix = 'filter'\r\n\r\n// query couchdb filters\r\nexport const changes = (db, filter, params) => {\r\n  return db.changes({\r\n    since: 'now',\r\n    live: true,\r\n    include_docs: true,\r\n    filter: prefix + filter\r\n  })\r\n}\r\n\r\nexport default filters\r\n","import { StyleSheet } from 'aphrodite/no-important'\r\n\r\nexport default StyleSheet.create({\r\n  label: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    right: 0,\r\n  },\r\n  labelContainer: {\r\n    position: 'relative',\r\n    width: '100%'\r\n  },\r\n  labelButton: {\r\n    paddingRight: '0 !important',\r\n    paddingLeft: '0 !important'\r\n  }\r\n})\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { CardHeader, Button } from 'reactstrap'\r\nimport { css } from 'aphrodite/no-important'\r\nimport styles from './styles'\r\n\r\nconst ChatHeader = ({ colorScheme, button, children, chatId, defaultMessageType, createDraft }) => {\r\n\r\n  const headerButtonOnClick = () => {\r\n    let message = {}\r\n    \r\n    defaultMessageType.required.forEach(field => {\r\n      let value = \"\"\r\n\r\n      const enumArr = defaultMessageType.properties[field].enum;\r\n\r\n      if(Array.isArray(enumArr) && enumArr.length) {\r\n        if(field === 'from' && enumArr.includes(chatId))\r\n          value = chatId\r\n        else if(defaultMessageType.properties[field].default)\r\n          value = defaultMessageType.properties[field].default\r\n        else\r\n          value = enumArr[0]\r\n      }\r\n      else if(defaultMessageType.properties[field].default) {\r\n        value = defaultMessageType.properties[field].default\r\n      }\r\n\r\n      message[field] = value\r\n    })\r\n\r\n    createDraft(message)\r\n  }\r\n\r\n  return (\r\n    <CardHeader className={colorScheme.item.bg}>\r\n      <div className={css(styles.labelContainer)}>\r\n        <div className={css(styles.label)}>\r\n          <Button color=\"link\" className={css(styles.labelButton)}>\r\n            <strong className={colorScheme.item.text}>{children}</strong>\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      {button && defaultMessageType && <Button color={colorScheme.item.btn} onClick={headerButtonOnClick}>{button}</Button>}\r\n    </CardHeader>\r\n  )\r\n}\r\n\r\nChatHeader.propTypes = {\r\n  createDraft: PropTypes.func.isRequired,\r\n  colorScheme: PropTypes.object.isRequired,\r\n  defaultMessageType: PropTypes.object.isRequired,\r\n  chatId: PropTypes.string.isRequired,\r\n  children: PropTypes.string,\r\n  button: PropTypes.string\r\n}\r\n\r\nChatHeader.defaultValues = {\r\n  button: \"\",\r\n  children: \"\"\r\n}\r\n\r\nexport default ChatHeader\r\n","import { connect } from 'react-redux'\r\nimport Header from '../../components/chat/header'\r\nimport { saveDraft } from '../../actions/messages'\r\nimport { chatAddBtnSettings } from '../../defaults/messageTypesKeys'\r\n\r\nconst mapStateToProps = (state) => ({\r\n  defaultMessageType: state.messageTypes.find(type => (type.scheme === chatAddBtnSettings.scheme))\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n  return {\r\n    createDraft: (message) => {\r\n      dispatch(saveDraft(message))\r\n    }\r\n  }\r\n}\r\n\r\nconst HeaderContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Header)\r\n\r\nexport default HeaderContainer\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Button } from 'reactstrap'\r\nimport JSONEditor from '@json-editor/json-editor'\r\n\r\nclass ChatForm extends Component {\r\n  constructor(props, content) {\r\n    super(props, content)\r\n\r\n    this.initForm = this.initForm.bind(this)\r\n    this.submitForm = this.submitForm.bind(this)\r\n    this.getFormFilteredData = this.getFormFilteredData.bind(this)\r\n\r\n    this.editor = null\r\n    this.editorBox = React.createRef()\r\n    this.hiddenAutofillKeys =  [\"draft\", \"_id\", \"_rev\", \"from\", \"test\"]\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initForm()\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    if(this.editor)\r\n      this.editor.setValue(this.getFormFilteredData(props.form, props.message).values)\r\n  }\r\n\r\n  getFormFilteredData(form, message) {\r\n    let formFiltered = {\r\n      ...form,\r\n      required: [\"_id\", ...form.required],\r\n      properties: {...form.properties}\r\n    }\r\n    let messageFiltered = {...message}\r\n\r\n    this.hiddenAutofillKeys.forEach(key => {\r\n      const requiredKey = formFiltered.required.indexOf(key)\r\n      if(requiredKey > -1)\r\n        formFiltered.required.splice(requiredKey, 1)\r\n\r\n      if(formFiltered.properties[key])\r\n        delete formFiltered.properties[key]\r\n\r\n      if(messageFiltered[key])\r\n        delete messageFiltered[key]\r\n    })\r\n    \r\n    return {\r\n      form: formFiltered,\r\n      values: messageFiltered\r\n    }\r\n  }\r\n\r\n  initForm() {\r\n    const formData = this.getFormFilteredData(this.props.form, this.props.message)\r\n\r\n    this.editor = new JSONEditor(this.editorBox.current, {\r\n      schema: formData.form,\r\n      theme: 'bootstrap4'\r\n    }).setValue(formData.values)\r\n\r\n    for(let key in this.editor.editors) {\r\n      if(this.editor.editors.hasOwnProperty(key) && key !== 'root') {\r\n        this.editor.watch(key, data => {\r\n          this.props.saveDraft({\r\n            ...this.props.message,\r\n            ...this.editor.getValue(),\r\n            [key.replace('root.', '')]: this.editor.getEditor(key).getValue()\r\n          })\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  submitForm() {\r\n    if(!this.editor.validate().length)\r\n      this.props.sendDraftMessage({\r\n        ...this.props.message,\r\n        ...this.editor.getValue(),\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"messageEdit\">\r\n        <div ref={this.editorBox}/>\r\n        <Button onClick={this.submitForm}>{this.props.button}</Button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nChatForm.propTypes = {\r\n  button: PropTypes.string.isRequired,\r\n  form: PropTypes.object.isRequired,\r\n  message: PropTypes.object.isRequired,\r\n  sendDraftMessage: PropTypes.func.isRequired,\r\n  saveDraft: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default ChatForm\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n  CardFooter,\r\n  Dropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  TabContent,\r\n  TabPane\r\n} from 'reactstrap'\r\nimport DraftForm from './form'\r\n\r\n\r\nclass ChatFooter extends Component {\r\n\r\n  constructor(props, content) {\r\n    super(props,content)\r\n\r\n    this.renderDropdown = this.renderDropdown.bind(this)\r\n    this.toggle = this.toggle.bind(this)\r\n    this.toggleDropdown = this.toggleDropdown.bind(this)\r\n    this.renderTabs = this.renderTabs.bind(this)\r\n\r\n    this.showDropdownAfter = 3\r\n\r\n    this.state = {\r\n      activeDraft: props.messages.length - 1,\r\n      dropdownOpen: false\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    if(this.props.messages.length !== props.messages.length)\r\n      this.toggle(props.messages.length - 1)\r\n  }\r\n\r\n  toggle(key) {\r\n    this.setState({\r\n      activeDraft: key,\r\n    })\r\n  }\r\n\r\n  toggleDropdown() {\r\n    this.setState({\r\n      dropdownOpen: !this.state.dropdownOpen\r\n    })\r\n  }\r\n\r\n  renderDropdown() {\r\n    return (\r\n      <Dropdown isOpen={this.state.dropdownOpen} toggle={this.toggleDropdown}>\r\n        <DropdownToggle caret className={this.props.colorScheme.global.activeTab}>\r\n          {this.props.messages[this.state.activeDraft].doc.title || `Draft ${this.state.activeDraft}`}\r\n        </DropdownToggle>\r\n        <DropdownMenu right>\r\n          {this.props.messages.map((data, key) => (\r\n            <DropdownItem\r\n              key={key}\r\n              className={this.state.activeDraft === key ? this.props.colorScheme.global.activeTab : \"\"}\r\n              onClick={() => { this.toggle(key)} }\r\n            >\r\n              {data.doc.title || `Draft ${key}`}\r\n            </DropdownItem>\r\n          ))}\r\n        </DropdownMenu>\r\n      </Dropdown>\r\n    )\r\n  }\r\n\r\n  renderTabs() {\r\n    if(this.props.messages.length < 2)\r\n      return <div/>\r\n\r\n    return (\r\n      <Nav tabs>\r\n        {this.props.messages.map((data, key) => (\r\n          <NavItem key={key}>\r\n            <NavLink\r\n              className={this.state.activeDraft === key ?\r\n                this.props.colorScheme.global.activeTab :\r\n                this.props.colorScheme.global.tab\r\n              }\r\n              onClick={() => { this.toggle(key)} }\r\n            >\r\n              {data.doc.title ? data.doc.title : `Draft ${key + 1}`}\r\n            </NavLink>\r\n          </NavItem>\r\n        ))}\r\n      </Nav>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <CardFooter className={this.props.colorScheme.global.footer}>\r\n        {this.props.messages.length > 0 && <TabContent activeTab={this.state.activeDraft + \"\"}>\r\n          {this.props.messages.length > this.showDropdownAfter ? this.renderDropdown() : this.renderTabs()}\r\n          {this.props.messages.map((data, key) => (\r\n            <TabPane key={key} tabId={key+\"\"}>\r\n              <DraftForm\r\n                message={data.doc}\r\n                button={this.props.button}\r\n                form={this.props.form}\r\n                saveDraft={this.props.saveDraft}\r\n                sendDraftMessage={this.props.sendDraftMessage}\r\n              />\r\n            </TabPane>\r\n          ))}\r\n        </TabContent >}\r\n      </CardFooter>\r\n    )\r\n  }\r\n}\r\n\r\nChatFooter.propTypes = {\r\n  saveDraft: PropTypes.func.isRequired,\r\n  sendDraftMessage: PropTypes.func.isRequired,\r\n  colorScheme: PropTypes.object.isRequired,\r\n  chatId: PropTypes.string.isRequired,\r\n  button: PropTypes.string.isRequired,\r\n  form: PropTypes.object.isRequired,\r\n  messages: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default ChatFooter\r\n","import { connect } from 'react-redux'\r\nimport Footer from '../../components/chat/footer'\r\nimport { sendDraftMessage, saveDraft } from '../../actions/messages'\r\nimport { chatAddBtnSettings } from '../../defaults/messageTypesKeys'\r\n\r\n\r\nconst mapStateToProps = (state, {chatId}) => ({\r\n  messages: (state.messages && Array.isArray(state.messages[chatId])) ? state.messages[chatId].filter(msg => msg.doc.draft) : [],\r\n  form: {\r\n    ...state.messageTypes.find(type => (type.scheme === chatAddBtnSettings.scheme)),\r\n    format: chatAddBtnSettings.format\r\n  }\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n  return {\r\n    sendDraftMessage: (message) => {\r\n      dispatch(sendDraftMessage(message))\r\n    },\r\n    saveDraft: (message) => {\r\n      dispatch(saveDraft(message))\r\n    }\r\n  }\r\n}\r\n\r\nconst FooterContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Footer)\r\n\r\nexport default FooterContainer\r\n","import React, { Component } from 'react'\r\nimport { Card, CardBody } from 'reactstrap'\r\nimport PropTypes from 'prop-types'\r\nimport Messages from '../../containers/messages'\r\nimport ChatColorScheme from '../../defaults/schemeColors/chatScheme'\r\nimport getDb from '../../databases'\r\nimport { query } from '../../databases/views'\r\nimport { changes, prefix } from '../../databases/filters'\r\nimport { dbOptions } from '../../databases'\r\n\r\nimport Header from '../../containers/chat/header'\r\nimport Footer from '../../containers/chat/footer'\r\n\r\nclass Chat extends Component {\r\n  constructor(props, content) {\r\n    super(props, content)\r\n    this.changeTimer = null\r\n    this.changeTime = 128\r\n    this.updateState = this.updateState.bind(this)\r\n    this.initDatabase = this.initDatabase.bind(this)\r\n    this.dbName = 'messages'\r\n    this.db = null\r\n    this.changes = null\r\n\r\n    this.state = {\r\n      colorScheme: (new ChatColorScheme(props.chatId)).getScheme()\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.initDatabase(this.props.chatId, this.props.activeRewind)\r\n  }\r\n\r\n  componentWillReceiveProps(props) {\r\n    this.initDatabase(props.chatId, props.activeRewind)\r\n  }\r\n\r\n  initDatabase(chatId, activeRewind) {\r\n    const isActiveRewind = activeRewind && activeRewind.doc.local !== this.dbName\r\n    let newDb = !this.db\r\n    if(this.props.chatId !== chatId || isActiveRewind || newDb || this.props.activeRewind && !activeRewind) {\r\n      if(this.changes) this.changes.cancel()\r\n\r\n      if(isActiveRewind) {\r\n        this.dbName = activeRewind.doc.local\r\n        this.db = getDb(this.dbName, false, {\r\n          ...dbOptions.messages,\r\n          name: activeRewind.doc.local,\r\n          remote: dbOptions.messages.remote ? dbOptions.messages.remote.replace(\"messages\", this.dbName) : null\r\n        })\r\n        newDb = true\r\n      }\r\n      else {\r\n        if(newDb || this.dbName !== 'messages') {\r\n          newDb = true\r\n          this.dbName = 'messages'\r\n          this.db = getDb(this.dbName)\r\n        }\r\n      }\r\n\r\n      if(newDb) {\r\n        this.updateState()\r\n      }\r\n\r\n      this.changes = changes(this.db, 'messages/' + chatId).on('change', () => {\r\n        this.updateState()\r\n      })\r\n      this.setState({colorScheme: (new ChatColorScheme(chatId)).getScheme()})\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.changes.cancel()\r\n    clearTimeout(this.changeTimer)\r\n  }\r\n\r\n  updateState = (f) => {\r\n    if(this.changeTimer) clearTimeout(this.changeTimer)\r\n    this.changeTimer = setTimeout(() => {\r\n      console.log(this.db);\r\n      query(this.db, 'messages/' + this.props.chatId, {\r\n        include_docs: true,\r\n        filter: prefix + 'messages/' + this.props.chatId\r\n      }).then(({rows}) => {\r\n        console.log(rows);\r\n        this.props.updateMessages(rows || [], this.props.chatId)\r\n        if(typeof f === 'function') f()\r\n      })\r\n    }, this.changeTime)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <Header colorScheme={this.state.colorScheme} button=\"Add >>\" chatId={this.props.chatId}>{this.props.label}</Header>\r\n        <CardBody className={this.state.colorScheme.global.body}>\r\n          <Messages chatId={this.props.chatId}/>\r\n        </CardBody>\r\n        <Footer colorScheme={this.state.colorScheme} button=\"Send\" chatId={this.props.chatId}/>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\n\r\nChat.propTypes = {\r\n  chatId: PropTypes.string.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  updateMessages: PropTypes.func.isRequired,\r\n  activeRewind: PropTypes.object\r\n}\r\n\r\nexport default Chat\r\n","import { connect } from 'react-redux'\r\nimport Chat from '../../components/chat'\r\nimport { updateMessages } from '../../actions/messages'\r\n\r\nconst mapStateToProps = (state) => ({\r\n  activeRewind: state.rewindPoints.points.filter(point => point.doc.active)[0]\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  updateMessages: (messages, chatId) => {\r\n    dispatch(updateMessages(messages, chatId))\r\n  }\r\n})\r\n\r\nconst ChatContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Chat)\r\n\r\nexport default ChatContainer\r\n","export const chat = { xs: 12, sm: 6, md: 4, lg: 4 }\r\n","import React from 'react'\r\nimport { css } from 'aphrodite/no-important';\r\nimport styles from './styles'\r\nimport { Row, Col } from 'reactstrap'\r\nimport Chat from '../../containers/chat'\r\nimport { chat as chatSizes } from '../../defaults/schemeSizes'\r\n\r\nconst Chatlist = ({ chats, form }) => {\r\n  return (\r\n    <Row>\r\n      {chats.map((chat, key) => (chat &&\r\n        <Col xs={chatSizes.xs} sm={chatSizes.sm} md={chatSizes.md} key={key}>\r\n          <div className={css(styles.chatItem)}>\r\n            <Chat chatId={chat.id} label={chat.label} form={form}/>\r\n          </div>\r\n        </Col>\r\n      ))}\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default Chatlist\r\n","import { connect } from 'react-redux'\r\nimport Chats from '../components/chatlist'\r\nimport { chatAddBtnSettings } from '../defaults/messageTypesKeys'\r\n\r\nconst mapStateToProps = stage => ({\r\n  chats: stage.chats,\r\n  form: {\r\n    ...stage.messageTypes.find(type => (type.scheme === chatAddBtnSettings.scheme)),\r\n    format: chatAddBtnSettings.format\r\n  }\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({})\r\n\r\nconst ChatsContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Chats)\r\n\r\nexport default ChatsContainer\r\n","import React from 'react'\r\nimport { css } from 'aphrodite/no-important';\r\nimport styles from './styles'\r\nimport { Container } from 'reactstrap'\r\nimport Control from '../../containers/control'\r\nimport Chats from '../../containers/chatlist'\r\n\r\nconst Homepage = () => {\r\n  return (\r\n    <Container fluid>\r\n      <div className={css(styles.main)}>\r\n        <Chats/>\r\n        <Control/>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Homepage\r\n","import React, { Component } from 'react'\r\nimport getDb from '../databases'\r\nimport { prefix, filters } from '../databases/filters'\r\nimport { views } from '../databases/views'\r\n\r\nclass CheckDb extends Component {\r\n  constructor(props, content) {\r\n    super(props, content)\r\n\r\n    this.check = this.check.bind(this)\r\n    this.messagesFiltersInitialized = false\r\n    this.messagesViewsInitialized = false\r\n    this.state = {\r\n      done: false\r\n    }\r\n  }\r\n\r\n  check() {\r\n    if(this.messagesFiltersInitialized && this.messagesViewsInitialized) {\r\n      this.setState({done: true})\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.checkMessages()\r\n  }\r\n\r\n  checkMessages() {\r\n    this.checkFilter(filters, prefix, Object.keys(filters))\r\n    this.checkView(views, Object.keys(views))\r\n  }\r\n\r\n  checkFilter(filters, prefix, filterKeys, currentKey) {\r\n\r\n    if(!currentKey) currentKey = 0\r\n    if(!filterKeys.length || filterKeys.length <= currentKey) {\r\n      this.messagesFiltersInitialized = true\r\n      this.check()\r\n      return false\r\n    }\r\n\r\n    const db = getDb(filterKeys[currentKey], false, {live: false})\r\n\r\n    const docId = '_design/' + prefix + filterKeys[currentKey]\r\n\r\n    db.get(docId).then(row => {\r\n      let equal = true\r\n      if(row.filters) {\r\n        Object.keys(filters[filterKeys[currentKey]]).forEach(key => {\r\n          if(!row.filters[key] || filters[filterKeys[currentKey]][key] !== row.filters[key])\r\n            equal = false\r\n        })\r\n      }\r\n      else equal = false\r\n\r\n      if(equal) {\r\n        this.checkFilter(filters, prefix, filterKeys, currentKey + 1)\r\n      }\r\n      else {\r\n        console.log(`Updateing Filters ${docId}`)\r\n        db.put({\r\n          ...row,\r\n          filters: filters[filterKeys[currentKey]]\r\n        }).then(() => {\r\n          console.log(`Updateing Filters ${docId} (success)`)\r\n          this.checkFilter(filters, prefix, filterKeys, currentKey + 1)\r\n        })\r\n      }\r\n    }).catch(({ status }) => {\r\n      if(status === 404) {\r\n        console.log(`Creating Filters ${docId}`)\r\n        db.put({\r\n          _id: docId,\r\n          filters: filters[filterKeys[currentKey]]\r\n        }).then(() => {\r\n          console.log(`Creating Filters ${docId} (success)`)\r\n          this.checkFilter(filters, prefix, filterKeys, currentKey + 1)\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  checkView(views, viewKeys, currentKey) {\r\n    if(!currentKey) currentKey = 0\r\n    if(!viewKeys.length || viewKeys.length <= currentKey) {\r\n      this.messagesViewsInitialized = true\r\n      this.check()\r\n      return false\r\n    }\r\n\r\n    const docId = '_design/' + viewKeys[currentKey]\r\n    const db = getDb(viewKeys[currentKey], false, {live: false})\r\n\r\n    db.get(docId).then(row => {\r\n      let equal = true\r\n      if(row.views) {\r\n        Object.keys(views[viewKeys[currentKey]]).forEach(key => {\r\n          if(!row.views[key] || views[viewKeys[currentKey]][key].map !== row.views[key].map)\r\n            equal = false\r\n        })\r\n      }\r\n      else equal = false\r\n\r\n      if(equal) {\r\n        this.checkView(views, viewKeys, currentKey + 1)\r\n      }\r\n      else {\r\n        console.log(`Updateing Views ${docId}`)\r\n        db.put({\r\n          ...row,\r\n          views: views[viewKeys[currentKey]]\r\n        }).then(() => {\r\n          console.log(`Updateing Views ${docId} (success)`)\r\n          this.checkView(views, viewKeys, currentKey + 1)\r\n        })\r\n      }\r\n    }).catch(({ status }) => {\r\n      console.log(\"test\", status);\r\n      if(status === 404) {\r\n        console.log(`Creating Views ${docId}`)\r\n        db.put({\r\n          _id: docId,\r\n          views: views[viewKeys[currentKey]]\r\n        }).then(() => {\r\n          console.log(`Views Filters ${docId} (success)`)\r\n          this.checkView(views, viewKeys, currentKey + 1)\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (<div>{this.state.done && this.props.children}</div>)\r\n  }\r\n}\r\n\r\nexport default CheckDb\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst PouchStore = ({ initStore, children }) => {\r\n  initStore()\r\n\r\n  return (\r\n    <div>{children}</div>\r\n  )\r\n}\r\n\r\nPouchStore.propTypes = {\r\n  initStore: PropTypes.func.isRequired,\r\n  children: PropTypes.node\r\n}\r\n\r\nexport default PouchStore\r\n","import { connect } from 'react-redux'\r\nimport PouchStore from '../components/pouchStore'\r\nimport { initPouch } from '../actions/init'\r\n\r\nconst mapStateToProps = (state) => ({\r\n\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  initStore: () => {\r\n    dispatch(initPouch())\r\n  }\r\n})\r\n\r\nconst PouchStoreContainer = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(PouchStore)\r\n\r\nexport default PouchStoreContainer\r\n","export const INIT = \"INIT\"\r\n\r\n// use it to init pouchdbMiddleware\r\nexport const initPouch = () => {\r\n  return { type: INIT, payload: {} }\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Provider } from 'react-redux'\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\n\r\nimport Homepage from './homepage'\r\nimport CheckDb from './checkDb'\r\nimport PouchStore from '../containers/pouchStore'\r\n \r\nconst Root = ({ store }) => (\r\n  <Provider store={store}>\r\n    <PouchStore>\r\n      <CheckDb>\r\n        <Router>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Homepage} />\r\n          </Switch>\r\n        </Router>\r\n      </CheckDb>\r\n    </PouchStore>\r\n  </Provider>\r\n)\r\n\r\nRoot.propTypes = {\r\n  store: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Root\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { persistentReducer } from 'redux-pouchdb-rethink'\r\nimport getDb from '../databases'\r\nimport { ADD_CHAT, REMOVE_CHAT } from '../actions/chats'\r\n\r\nconst initialState = []\r\n\r\nconst chats = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case ADD_CHAT:\r\n      return [...state, action.payload.chat]\r\n    case REMOVE_CHAT:\r\n      return state.filter(chat => chat.id !== action.payload)\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst db = getDb('chats')\r\n\r\nexport default persistentReducer(chats, {db: db, name: \"chats\"})\r\n","import { getToKeys, getFromKeys } from './allowedChats'\r\n\r\nconst form = {\r\n  \"type\": \"object\",\r\n  \"format\": \"grid\",\r\n  \"required\": [\r\n    \"from\",\r\n    \"to\",\r\n    \"title\",\r\n  ],\r\n  \"properties\": {\r\n    \"from\": {\r\n      \"type\": \"string\",\r\n      \"enum\": getFromKeys()\r\n    },\r\n    \"to\": {\r\n      \"type\": \"string\",\r\n      \"enum\": getToKeys()\r\n    },\r\n    \"title\": {\r\n      \"type\": \"string\",\r\n      \"description\": \"Title for this message\"\r\n    }\r\n  }\r\n}\r\n\r\nconst properties = [\r\n  {\r\n    \"scheme\": \"height\",\r\n    \"title\": \"PersonHeight\",\r\n    \"properties\": {\r\n      \"height\": {\r\n        \"type\": \"integer\",\r\n        \"default\": 12\r\n      }\r\n    }\r\n  },\r\n  {\r\n    \"scheme\": \"weight\",\r\n    \"title\": \"PersonWeight\",\r\n    \"properties\": {\r\n      \"weight\": {\r\n        \"type\": \"integer\",\r\n        \"default\": 12\r\n      }\r\n    }\r\n  },\r\n  {\r\n    \"scheme\": \"color\",\r\n    \"title\": \"PersonColor\",\r\n    \"properties\": {\r\n      \"color\": {\r\n        \"type\": \"string\",\r\n        \"format\": \"color\"\r\n      }\r\n    }\r\n  },\r\n  {\r\n    \"scheme\": \"name\",\r\n    \"title\": \"PersonName\",\r\n    \"properties\": {\r\n      \"name\": {\r\n        \"type\": \"string\",\r\n        \"format\": \"string\",\r\n      }\r\n    }\r\n  }\r\n]\r\n\r\nconst getMessageTypes = () => {\r\n  return properties.map(prop => {\r\n    return {\r\n      ...form,\r\n      scheme: prop.scheme,\r\n      title: prop.title,\r\n      properties: {\r\n        ...form.properties,\r\n        ...prop.properties\r\n      },\r\n      required: [\r\n        ...form.required,\r\n        prop.scheme\r\n      ]\r\n    }\r\n  })\r\n}\r\n\r\nexport default getMessageTypes\r\n","import { persistentReducer } from 'redux-pouchdb-rethink'\r\nimport getMessageTypes from '../defaults/messageTypes'\r\nimport getDb from '../databases'\r\n\r\nconst initialState = getMessageTypes()\r\n\r\nconst messageTypes = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst db = getDb('message-types')\r\n\r\nexport default persistentReducer(messageTypes, {db: db, name: \"message-types\"})\r\n","import getDb from '../databases'\r\nimport { SAVE_DRAFT, PUSH_MESSAGES, REMOVE_ALL_MESSAGES, UPDATE_MESSAGES, SEND_DRAFT_MESSAGE } from '../actions/messages'\r\n\r\nexport const db = getDb('messages', true)\r\nconst dbClones = {}\r\n\r\nlet initialState = {}\r\n\r\nconst messages = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case PUSH_MESSAGES:\r\n      let messages = initAdditionalAttributes(action.payload.messages)\r\n      if(messages.length === 1)\r\n        db.put(messages[0])\r\n      else {\r\n        db.bulkDocs(messages)\r\n      }\r\n      return state\r\n    case REMOVE_ALL_MESSAGES:\r\n      db.allDocs().then(result => {\r\n        return Promise.all(result.rows.map(row => {\r\n          if(row.id.search(\"_design\") === -1) {\r\n            return db.remove(row.id, row.value.rev)\r\n          }\r\n          return false\r\n        }));\r\n      })\r\n      return {}\r\n    case UPDATE_MESSAGES:\r\n      return {\r\n        ...state,\r\n        [action.payload.chatId]: action.payload.messages\r\n      }\r\n    case SAVE_DRAFT:\r\n      let message = {\r\n        ...(initAdditionalAttributes([action.payload.message])[0]),\r\n        draft: true\r\n      }\r\n\r\n      if(action.payload.message._id)\r\n        message._id = action.payload.message._id\r\n\r\n      if(action.payload.message._rev)\r\n        message._rev = action.payload.message._rev\r\n\r\n      db.put(message)\r\n\r\n      return state\r\n    case SEND_DRAFT_MESSAGE:\r\n      db.get(action.payload.message._id).then(row => {\r\n        db.bulkDocs([\r\n          {...initAdditionalAttributes([action.payload.message])[0], _rev: \"\"},\r\n          {...row, _deleted: true}\r\n        ])\r\n      })\r\n      return state\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst getId = (key) => {\r\n  return new Date().toISOString() + \"-\" + (key || '0')\r\n}\r\n\r\nconst initAdditionalAttributes = (messages) => {\r\n  return messages.map((message, key) => {\r\n    return {\r\n      ...message,\r\n      _id: getId(key),\r\n      draft: false\r\n    }\r\n  })\r\n}\r\n\r\nexport default messages\r\n","import { UPDATE_REWIND_POINTS } from '../actions/rewindPoints'\r\n\r\nconst initialState = {\r\n  points: [],\r\n  activeRewind: null\r\n}\r\n\r\nconst rewindPoints = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case UPDATE_REWIND_POINTS:\r\n      return {\r\n        ...state,\r\n        points: action.payload.points\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default rewindPoints\r\n","import { combineReducers } from 'redux'\r\nimport chats from './chats'\r\nimport messageTypes from './messageTypes'\r\nimport messages from './messages'\r\nimport rewindPoints from './rewindPoints'\r\n\r\nexport default combineReducers({\r\n  chats,\r\n  messageTypes,\r\n  messages,\r\n  rewindPoints\r\n})\r\n","import getDb, { dbOptions } from '../../databases'\r\n\r\nimport {\r\n  updateRewindPoints,\r\n  // createTmpPoint,\r\n  CREATE_REWIND_POINT,\r\n  // REMOVE_REWIND_POINT,\r\n  SELECT_REWIND_POINT\r\n} from '../../actions/rewindPoints'\r\n\r\nimport { INIT } from  '../../actions/init'\r\n\r\nconst rewindPoints = (store, next, action, db, messagesDb) => {\r\n  switch (action.type) {\r\n    case INIT:\r\n      init(db, store)\r\n    break\r\n    case CREATE_REWIND_POINT:\r\n      cloneDatabase(messagesDb, dbOptions.messages).then(clonedData => {\r\n        db.put({\r\n          ...initAdditionalAttributes(action.payload),\r\n          ...clonedData\r\n        }).then(point => {\r\n          updateLocalRewindPoints(db, store)\r\n        })\r\n      })\r\n    break\r\n    case SELECT_REWIND_POINT:\r\n      db.allDocs({include_docs: true}).then(({ rows }) => {\r\n        const changedDocs = rows.filter(row => (row.doc.active || row.doc._id === action.payload.id))\r\n                                .map(item => ({...item.doc, active: !item.doc.active}))\r\n\r\n        db.bulkDocs(changedDocs).then(() => {\r\n          updateLocalRewindPoints(db, store)\r\n        })\r\n      })\r\n    break\r\n    default:\r\n      return false\r\n  }\r\n  return true\r\n}\r\n\r\nconst cloneDatabase = (db, options) => {\r\n  return new Promise((resolve, reject) => {\r\n    const id = getId()\r\n    const messagesDbName = options.name + '-rewind-' + id;\r\n    const newDb = getDb(messagesDbName)\r\n\r\n    newDb.replicate.from(db, {\r\n      live: false,\r\n      retry: false,\r\n      filter: 'filtermessages/cloneFilter'\r\n    }).on('complete', done => {\r\n      console.log('success', done);\r\n      if(options.remote) {\r\n        const messagesRemoteDbName = options.remote + '-rewind-' + id\r\n        const remoteDb = getDb(messagesRemoteDbName)\r\n        remoteDb.replicate.from(newDb, {\r\n          live: false,\r\n          retry: false\r\n        }).on('complete', doneRemote => {\r\n          resolve({_id: id, local: messagesDbName, remote: true})\r\n        }).on('error', err => {\r\n          console.log(\"Error on remote database sync, created only local db\");\r\n          console.log(err)\r\n          resolve({_id: id, local: messagesDbName, remote: false})\r\n        })\r\n      }\r\n      else {\r\n        resolve({_id: id, local: messagesDbName, remote: false})\r\n      }\r\n    }).on('error', err => {\r\n      console.log(\"Error on local db clone\");\r\n      console.log(err)\r\n      reject()\r\n    })\r\n  })\r\n}\r\n\r\nconst init = (db, store) => {\r\n  updateLocalRewindPoints(db, store)\r\n}\r\n\r\nconst updateLocalRewindPoints = (db, store) => {\r\n  db.allDocs({include_docs: true}).then(({rows}) => {\r\n    console.log(rows);\r\n    store.dispatch(updateRewindPoints(rows))\r\n  })\r\n}\r\n\r\nconst getId = (key) => {\r\n  return new Date().toISOString() + \"-\" + (key || '0')\r\n}\r\n\r\nconst initAdditionalAttributes = (rewindPoint) => {\r\n  return {\r\n    ...rewindPoint,\r\n    active: false,\r\n    roomId: \"\"\r\n  }\r\n}\r\n\r\nexport default rewindPoints\r\n","import rewindPoints from './rewindPoints'\r\n// import messages from './messages'\r\nimport getDb from '../../databases'\r\n\r\n//get databases\r\nconst rewindPointsDb = getDb('rewind-points')\r\nconst messagesDb = getDb('messages', false)\r\n//watchers\r\nconst pouchdbMiddleware = store => next => action => {\r\n  if (\r\n    !rewindPoints(store, next, action, rewindPointsDb, messagesDb)\r\n  )\r\n  next(action)\r\n}\r\n\r\nexport default pouchdbMiddleware\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Root from './components/root'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport '@json-editor/json-editor/src/styles/starrating.css'\r\nimport 'react-perfect-scrollbar/dist/css/styles.css'\r\nimport reducers from './reducers'\r\nimport { persistentStore } from 'redux-pouchdb-rethink'\r\nimport thunk from 'redux-thunk'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport pouchdbSync from './middlewares/pouchdb'\r\nimport getDb from './databases'\r\n\r\nconst applyMiddlewares = applyMiddleware(\r\n  thunk, pouchdbSync\r\n)\r\n\r\nconst db = getDb('main')\r\n\r\nconst createStoreWithMiddleware = composeWithDevTools(\r\n  applyMiddlewares,\r\n  persistentStore({db}),\r\n)(createStore)\r\n\r\nconst store = createStoreWithMiddleware(reducers)\r\n\r\nReactDOM.render(\r\n  <Root store={store}/>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}